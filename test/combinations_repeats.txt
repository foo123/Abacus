Abacus.CombinationRepeats (VERSION = 2.0.0)
---
o = Abacus.Combination(6,3,{type:"repeated"})
o.total()
Integer { value: 56n }
o.next()
0,0,0
o.hasNext()
true
o.next()
0,0,1
default order is "lex", lexicographic-order
o.rewind()
[ '0,0,0', 0, Integer { value: 0n }, '0,0,0' ]
[ '0,0,1', 1, Integer { value: 1n }, '0,0,1' ]
[ '0,0,2', 2, Integer { value: 2n }, '0,0,2' ]
[ '0,0,3', 3, Integer { value: 3n }, '0,0,3' ]
[ '0,0,4', 4, Integer { value: 4n }, '0,0,4' ]
[ '0,0,5', 5, Integer { value: 5n }, '0,0,5' ]
[ '0,1,1', 6, Integer { value: 6n }, '0,1,1' ]
[ '0,1,2', 7, Integer { value: 7n }, '0,1,2' ]
[ '0,1,3', 8, Integer { value: 8n }, '0,1,3' ]
[ '0,1,4', 9, Integer { value: 9n }, '0,1,4' ]
[ '0,1,5', 10, Integer { value: 10n }, '0,1,5' ]
[ '0,2,2', 11, Integer { value: 11n }, '0,2,2' ]
[ '0,2,3', 12, Integer { value: 12n }, '0,2,3' ]
[ '0,2,4', 13, Integer { value: 13n }, '0,2,4' ]
[ '0,2,5', 14, Integer { value: 14n }, '0,2,5' ]
[ '0,3,3', 15, Integer { value: 15n }, '0,3,3' ]
[ '0,3,4', 16, Integer { value: 16n }, '0,3,4' ]
[ '0,3,5', 17, Integer { value: 17n }, '0,3,5' ]
[ '0,4,4', 18, Integer { value: 18n }, '0,4,4' ]
[ '0,4,5', 19, Integer { value: 19n }, '0,4,5' ]
[ '0,5,5', 20, Integer { value: 20n }, '0,5,5' ]
[ '1,1,1', 21, Integer { value: 21n }, '1,1,1' ]
[ '1,1,2', 22, Integer { value: 22n }, '1,1,2' ]
[ '1,1,3', 23, Integer { value: 23n }, '1,1,3' ]
[ '1,1,4', 24, Integer { value: 24n }, '1,1,4' ]
[ '1,1,5', 25, Integer { value: 25n }, '1,1,5' ]
[ '1,2,2', 26, Integer { value: 26n }, '1,2,2' ]
[ '1,2,3', 27, Integer { value: 27n }, '1,2,3' ]
[ '1,2,4', 28, Integer { value: 28n }, '1,2,4' ]
[ '1,2,5', 29, Integer { value: 29n }, '1,2,5' ]
[ '1,3,3', 30, Integer { value: 30n }, '1,3,3' ]
[ '1,3,4', 31, Integer { value: 31n }, '1,3,4' ]
[ '1,3,5', 32, Integer { value: 32n }, '1,3,5' ]
[ '1,4,4', 33, Integer { value: 33n }, '1,4,4' ]
[ '1,4,5', 34, Integer { value: 34n }, '1,4,5' ]
[ '1,5,5', 35, Integer { value: 35n }, '1,5,5' ]
[ '2,2,2', 36, Integer { value: 36n }, '2,2,2' ]
[ '2,2,3', 37, Integer { value: 37n }, '2,2,3' ]
[ '2,2,4', 38, Integer { value: 38n }, '2,2,4' ]
[ '2,2,5', 39, Integer { value: 39n }, '2,2,5' ]
[ '2,3,3', 40, Integer { value: 40n }, '2,3,3' ]
[ '2,3,4', 41, Integer { value: 41n }, '2,3,4' ]
[ '2,3,5', 42, Integer { value: 42n }, '2,3,5' ]
[ '2,4,4', 43, Integer { value: 43n }, '2,4,4' ]
[ '2,4,5', 44, Integer { value: 44n }, '2,4,5' ]
[ '2,5,5', 45, Integer { value: 45n }, '2,5,5' ]
[ '3,3,3', 46, Integer { value: 46n }, '3,3,3' ]
[ '3,3,4', 47, Integer { value: 47n }, '3,3,4' ]
[ '3,3,5', 48, Integer { value: 48n }, '3,3,5' ]
[ '3,4,4', 49, Integer { value: 49n }, '3,4,4' ]
[ '3,4,5', 50, Integer { value: 50n }, '3,4,5' ]
[ '3,5,5', 51, Integer { value: 51n }, '3,5,5' ]
[ '4,4,4', 52, Integer { value: 52n }, '4,4,4' ]
[ '4,4,5', 53, Integer { value: 53n }, '4,4,5' ]
[ '4,5,5', 54, Integer { value: 54n }, '4,5,5' ]
[ '5,5,5', 55, Integer { value: 55n }, '5,5,5' ]
backwards
o.rewind(-1)
5,5,5
4,5,5
4,4,5
4,4,4
3,5,5
3,4,5
3,4,4
3,3,5
3,3,4
3,3,3
2,5,5
2,4,5
2,4,4
2,3,5
2,3,4
2,3,3
2,2,5
2,2,4
2,2,3
2,2,2
1,5,5
1,4,5
1,4,4
1,3,5
1,3,4
1,3,3
1,2,5
1,2,4
1,2,3
1,2,2
1,1,5
1,1,4
1,1,3
1,1,2
1,1,1
0,5,5
0,4,5
0,4,4
0,3,5
0,3,4
0,3,3
0,2,5
0,2,4
0,2,3
0,2,2
0,1,5
0,1,4
0,1,3
0,1,2
0,1,1
0,0,5
0,0,4
0,0,3
0,0,2
0,0,1
0,0,0
o.order("lex,reflected")
0,0,0
1,0,0
2,0,0
3,0,0
4,0,0
5,0,0
1,1,0
2,1,0
3,1,0
4,1,0
5,1,0
2,2,0
3,2,0
4,2,0
5,2,0
3,3,0
4,3,0
5,3,0
4,4,0
5,4,0
5,5,0
1,1,1
2,1,1
3,1,1
4,1,1
5,1,1
2,2,1
3,2,1
4,2,1
5,2,1
3,3,1
4,3,1
5,3,1
4,4,1
5,4,1
5,5,1
2,2,2
3,2,2
4,2,2
5,2,2
3,3,2
4,3,2
5,3,2
4,4,2
5,4,2
5,5,2
3,3,3
4,3,3
5,3,3
4,4,3
5,4,3
5,5,3
4,4,4
5,4,4
5,5,4
5,5,5
o.order("lex,reversed")
5,5,5
4,5,5
4,4,5
4,4,4
3,5,5
3,4,5
3,4,4
3,3,5
3,3,4
3,3,3
2,5,5
2,4,5
2,4,4
2,3,5
2,3,4
2,3,3
2,2,5
2,2,4
2,2,3
2,2,2
1,5,5
1,4,5
1,4,4
1,3,5
1,3,4
1,3,3
1,2,5
1,2,4
1,2,3
1,2,2
1,1,5
1,1,4
1,1,3
1,1,2
1,1,1
0,5,5
0,4,5
0,4,4
0,3,5
0,3,4
0,3,3
0,2,5
0,2,4
0,2,3
0,2,2
0,1,5
0,1,4
0,1,3
0,1,2
0,1,1
0,0,5
0,0,4
0,0,3
0,0,2
0,0,1
0,0,0
o.order("colex")
0,0,0
0,0,1
0,1,1
1,1,1
0,0,2
0,1,2
1,1,2
0,2,2
1,2,2
2,2,2
0,0,3
0,1,3
1,1,3
0,2,3
1,2,3
2,2,3
0,3,3
1,3,3
2,3,3
3,3,3
0,0,4
0,1,4
1,1,4
0,2,4
1,2,4
2,2,4
0,3,4
1,3,4
2,3,4
3,3,4
0,4,4
1,4,4
2,4,4
3,4,4
4,4,4
0,0,5
0,1,5
1,1,5
0,2,5
1,2,5
2,2,5
0,3,5
1,3,5
2,3,5
3,3,5
0,4,5
1,4,5
2,4,5
3,4,5
4,4,5
0,5,5
1,5,5
2,5,5
3,5,5
4,5,5
5,5,5
o.order("colex,reflected")
0,0,0
1,0,0
1,1,0
1,1,1
2,0,0
2,1,0
2,1,1
2,2,0
2,2,1
2,2,2
3,0,0
3,1,0
3,1,1
3,2,0
3,2,1
3,2,2
3,3,0
3,3,1
3,3,2
3,3,3
4,0,0
4,1,0
4,1,1
4,2,0
4,2,1
4,2,2
4,3,0
4,3,1
4,3,2
4,3,3
4,4,0
4,4,1
4,4,2
4,4,3
4,4,4
5,0,0
5,1,0
5,1,1
5,2,0
5,2,1
5,2,2
5,3,0
5,3,1
5,3,2
5,3,3
5,4,0
5,4,1
5,4,2
5,4,3
5,4,4
5,5,0
5,5,1
5,5,2
5,5,3
5,5,4
5,5,5
o.order("colex,reversed")
5,5,5
4,5,5
3,5,5
2,5,5
1,5,5
0,5,5
4,4,5
3,4,5
2,4,5
1,4,5
0,4,5
3,3,5
2,3,5
1,3,5
0,3,5
2,2,5
1,2,5
0,2,5
1,1,5
0,1,5
0,0,5
4,4,4
3,4,4
2,4,4
1,4,4
0,4,4
3,3,4
2,3,4
1,3,4
0,3,4
2,2,4
1,2,4
0,2,4
1,1,4
0,1,4
0,0,4
3,3,3
2,3,3
1,3,3
0,3,3
2,2,3
1,2,3
0,2,3
1,1,3
0,1,3
0,0,3
2,2,2
1,2,2
0,2,2
1,1,2
0,1,2
0,0,2
1,1,1
0,1,1
0,0,1
0,0,0
o.order("random")
0,3,3
0,1,1
2,2,5
0,0,3
1,1,4
0,0,4
1,1,2
0,4,4
2,5,5
1,1,3
3,5,5
1,1,1
0,0,1
1,1,5
1,4,4
1,3,3
1,3,4
0,2,5
4,4,4
1,2,4
3,3,3
0,1,3
1,5,5
2,3,4
1,3,5
0,5,5
0,0,2
0,0,0
0,1,2
0,3,4
1,2,2
3,3,4
0,3,5
2,4,5
0,4,5
5,5,5
3,3,5
1,2,3
0,0,5
1,2,5
4,5,5
0,2,4
1,4,5
4,4,5
0,2,3
0,2,2
0,1,5
3,4,5
2,2,2
0,1,4
3,4,4
2,2,3
2,2,4
2,3,3
2,4,4
2,3,5
o.random()
0,1,3
o.order("colex").range(-5, -1)
1,5,5
2,5,5
3,5,5
4,5,5
5,5,5
o.dispose()
