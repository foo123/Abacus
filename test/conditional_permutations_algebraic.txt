Abacus Algebraic Composition: Permutations w/ Partial Boolean & Algebraic Conditions (VERSION = 1.0.0)
---
6-Permutations where (unique)values in 0th position ARE (0,1,2), in 4th position ARE NOT (3,4) and in 5th = (4)+1
o = Abacus.Tensor(6,{type:"partial",data:[[true,0,1,2],[false,3,4],"[4]+1"],ordering:"<>",position:[0,4,5]}).completeWith(Abacus.Permutation(6-3))
o.dimension()
6
o.total()
24
o.next()
[ 0, 3, 4, 5, 1, 2 ]
o.hasNext()
true
o.next()
[ 0, 1, 4, 5, 2, 3 ]
default order is "lex", lexicographic-order
o.rewind()
[ 0, 3, 4, 5, 1, 2 ]
[ 0, 1, 4, 5, 2, 3 ]
[ 1, 0, 4, 5, 2, 3 ]
[ 2, 3, 4, 5, 0, 1 ]
[ 0, 3, 5, 4, 1, 2 ]
[ 0, 1, 5, 4, 2, 3 ]
[ 1, 0, 5, 4, 2, 3 ]
[ 2, 3, 5, 4, 0, 1 ]
[ 0, 4, 3, 5, 1, 2 ]
[ 0, 4, 1, 5, 2, 3 ]
[ 1, 4, 0, 5, 2, 3 ]
[ 2, 4, 3, 5, 0, 1 ]
[ 0, 4, 5, 3, 1, 2 ]
[ 0, 4, 5, 1, 2, 3 ]
[ 1, 4, 5, 0, 2, 3 ]
[ 2, 4, 5, 3, 0, 1 ]
[ 0, 5, 3, 4, 1, 2 ]
[ 0, 5, 1, 4, 2, 3 ]
[ 1, 5, 0, 4, 2, 3 ]
[ 2, 5, 3, 4, 0, 1 ]
[ 0, 5, 4, 3, 1, 2 ]
[ 0, 5, 4, 1, 2, 3 ]
[ 1, 5, 4, 0, 2, 3 ]
[ 2, 5, 4, 3, 0, 1 ]
backwards
o.rewind(-1)
[ 2, 5, 4, 3, 0, 1 ]
[ 1, 5, 4, 0, 2, 3 ]
[ 0, 5, 4, 1, 2, 3 ]
[ 0, 5, 4, 3, 1, 2 ]
[ 2, 5, 3, 4, 0, 1 ]
[ 1, 5, 0, 4, 2, 3 ]
[ 0, 5, 1, 4, 2, 3 ]
[ 0, 5, 3, 4, 1, 2 ]
[ 2, 4, 5, 3, 0, 1 ]
[ 1, 4, 5, 0, 2, 3 ]
[ 0, 4, 5, 1, 2, 3 ]
[ 0, 4, 5, 3, 1, 2 ]
[ 2, 4, 3, 5, 0, 1 ]
[ 1, 4, 0, 5, 2, 3 ]
[ 0, 4, 1, 5, 2, 3 ]
[ 0, 4, 3, 5, 1, 2 ]
[ 2, 3, 5, 4, 0, 1 ]
[ 1, 0, 5, 4, 2, 3 ]
[ 0, 1, 5, 4, 2, 3 ]
[ 0, 3, 5, 4, 1, 2 ]
[ 2, 3, 4, 5, 0, 1 ]
[ 1, 0, 4, 5, 2, 3 ]
[ 0, 1, 4, 5, 2, 3 ]
[ 0, 3, 4, 5, 1, 2 ]
o.random()
[ 1, 0, 5, 4, 2, 3 ]
o.dispose()

o = Abacus.Tensor(7,{type:"partial",data:["{0..4}","[0]+1","[1]+1","[3]-1","[4]-1"],ordering:"<>",position:[0,1,2,4,5]}).completeWith(Abacus.Permutation(7-5))
o.dimension()
7
o.total()
6
o.next()
[ 0, 1, 2, 5, 4, 3, 6 ]
o.hasNext()
true
o.next()
[ 0, 1, 2, 6, 5, 4, 3 ]
default order is "lex", lexicographic-order
o.rewind()
[ 0, 1, 2, 5, 4, 3, 6 ]
[ 0, 1, 2, 6, 5, 4, 3 ]
[ 1, 2, 3, 6, 5, 4, 0 ]
[ 3, 4, 5, 2, 1, 0, 6 ]
[ 4, 5, 6, 2, 1, 0, 3 ]
[ 4, 5, 6, 3, 2, 1, 0 ]
backwards
o.rewind(-1)
[ 4, 5, 6, 3, 2, 1, 0 ]
[ 4, 5, 6, 2, 1, 0, 3 ]
[ 3, 4, 5, 2, 1, 0, 6 ]
[ 1, 2, 3, 6, 5, 4, 0 ]
[ 0, 1, 2, 6, 5, 4, 3 ]
[ 0, 1, 2, 5, 4, 3, 6 ]
o.random()
[ 4, 5, 6, 2, 1, 0, 3 ]
o.dispose()
Abacus.Tensor(6,{type:"partial",data:{0:"{0..4}",1:"[0]+1",2:"[0]+[1]"},ordering:"<>"}).completeWith(Abacus.Permutation(6-3))
o.total()
12
o.rewind()
[ 1, 2, 3, 0, 4, 5 ]
[ 2, 3, 5, 0, 1, 4 ]
[ 1, 2, 3, 0, 5, 4 ]
[ 2, 3, 5, 0, 4, 1 ]
[ 1, 2, 3, 4, 0, 5 ]
[ 2, 3, 5, 1, 0, 4 ]
[ 1, 2, 3, 4, 5, 0 ]
[ 2, 3, 5, 1, 4, 0 ]
[ 1, 2, 3, 5, 0, 4 ]
[ 2, 3, 5, 4, 0, 1 ]
[ 1, 2, 3, 5, 4, 0 ]
[ 2, 3, 5, 4, 1, 0 ]
backwards
o.rewind(-1)
[ 2, 3, 5, 4, 1, 0 ]
[ 1, 2, 3, 5, 4, 0 ]
[ 2, 3, 5, 4, 0, 1 ]
[ 1, 2, 3, 5, 0, 4 ]
[ 2, 3, 5, 1, 4, 0 ]
[ 1, 2, 3, 4, 5, 0 ]
[ 2, 3, 5, 1, 0, 4 ]
[ 1, 2, 3, 4, 0, 5 ]
[ 2, 3, 5, 0, 4, 1 ]
[ 1, 2, 3, 0, 5, 4 ]
[ 2, 3, 5, 0, 1, 4 ]
[ 1, 2, 3, 0, 4, 5 ]
o.random()
[ 2, 3, 5, 4, 1, 0 ]
o.dispose()
Abacus.Tensor(6,{type:"partial",data:{0:"{0..4}",1:"[0]+1",2:"[0]+[1]",3:"5"},ordering:"<>"}).completeWith(Abacus.Permutation(6-4))
o.total()
2
o.rewind()
[ 1, 2, 3, 5, 0, 4 ]
[ 1, 2, 3, 5, 4, 0 ]
backwards
o.rewind(-1)
[ 1, 2, 3, 5, 4, 0 ]
[ 1, 2, 3, 5, 0, 4 ]
o.random()
[ 1, 2, 3, 5, 0, 4 ]
o.dispose()
