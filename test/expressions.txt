Abacus.Expressions (VERSION = 1.0.6)
---
Symbolic Expressions
---
o=Abacus.Expr()
o.toString()
0
o.toTex()
0
o.evaluate()
0
o.d("x")
0
o.dispose()
---
Abacus.Expr.fromString("1+2*x").toString()
1+2*x
Abacus.Expr.fromString("1/2+2*x_{1}*x_2^2").toString()
1/2+2*x_1*x_2^2
---
o=Abacus.Expr(1, Abacus.Expr.Term("x", 2))
o.toString()
1+2*x
o.toTex()
1+2x
o.evaluate({"x":1})
3
o.d("x")
2
o.d("x",2)
0 true
o2=Abacus.Expr(Abacus.Expr.Term("y^2", 3))
3*y^2
o.add(o2)
1+2*x+3*y^2
o.add(o2).d("x")
2
o.add(o2).d("y")
6*y
o.add(o2).d("y",2)
6
o.rad(2)
(1+2*x)^(1/2)
o2=Abacus.Expr(Abacus.Expr.Term("y^2", 3))
3*y^2
o.mul(o2)
6*x*y^2+3*y^2
o.mul(o2).d("x")
6*y^2
o.mul(o2).d("y")
12*x*y+6*y
o.mul(o2).d("y",2)
6+12*x true
o.dispose()
---
o2=Abacus.RationalExpr(Abacus.Expr(1, Abacus.Expr.Term("x", 2)))
o2.toString()
1+2*x

o=Abacus.RationalExpr(Abacus.Expr(1, Abacus.Expr.Term("x", 2)), Abacus.Expr(1, Abacus.Expr.Term("y", 2)))
o.toString()
(1+2*x)/(1+2*y)
o.pow(2)
(1+4*x+4*x^2)/(1+4*y+4*y^2)
o.rad(2)
((1+2*x)^(1/2))/((1+2*y)^(1/2))
o.add(o2)
(2+4*x+4*x*y+2*y)/(1+2*y)
o.mul(o2)
(1+4*x+4*x^2)/(1+2*y)
o.sub(o2)
(-4*x*y-2*y)/(1+2*y)
o.div(o2)
(1+2*x)/(1+2*x+4*x*y+2*y)
