Abacus.Combinatorics Filtered Combinatorial Objects (VERSION = 0.9.10)
---
Get all Permutations filtered from all possible Tuples (an inefficient way to generate permutations)
o = Abacus.Tensor(3,3,{"type":"tuple"}).filterBy(Abacus.Filter.UNIQUE())
o.total() /* with filtering applied .total() and some other functions still return original data not the filtered ones */
27
default order is "lex", lexicographic-order
[ 0, 1, 2 ]
[ 0, 2, 1 ]
[ 1, 0, 2 ]
[ 1, 2, 0 ]
[ 2, 0, 1 ]
[ 2, 1, 0 ]
backwards
o.rewind(-1)
[ 2, 1, 0 ]
[ 2, 0, 1 ]
[ 1, 2, 0 ]
[ 1, 0, 2 ]
[ 0, 2, 1 ]
[ 0, 1, 2 ]


Get all Combinations filtered from all possible Tuples (an inefficient way to generate combinations)
o = Abacus.Tensor(3,6,{"type":"tuple"}).filterBy(Abacus.Filter.SORTED("<"))
o.total() /* with filtering applied .total() and some other functions still return original data not the filtered ones */
216
default order is "lex", lexicographic-order
[ 0, 1, 2 ]
[ 0, 1, 3 ]
[ 0, 1, 4 ]
[ 0, 1, 5 ]
[ 0, 2, 3 ]
[ 0, 2, 4 ]
[ 0, 2, 5 ]
[ 0, 3, 4 ]
[ 0, 3, 5 ]
[ 0, 4, 5 ]
[ 1, 2, 3 ]
[ 1, 2, 4 ]
[ 1, 2, 5 ]
[ 1, 3, 4 ]
[ 1, 3, 5 ]
[ 1, 4, 5 ]
[ 2, 3, 4 ]
[ 2, 3, 5 ]
[ 2, 4, 5 ]
[ 3, 4, 5 ]
backwards
o.rewind(-1)
[ 3, 4, 5 ]
[ 2, 4, 5 ]
[ 2, 3, 5 ]
[ 2, 3, 4 ]
[ 1, 4, 5 ]
[ 1, 3, 5 ]
[ 1, 3, 4 ]
[ 1, 2, 5 ]
[ 1, 2, 4 ]
[ 1, 2, 3 ]
[ 0, 4, 5 ]
[ 0, 3, 5 ]
[ 0, 3, 4 ]
[ 0, 2, 5 ]
[ 0, 2, 4 ]
[ 0, 2, 3 ]
[ 0, 1, 5 ]
[ 0, 1, 4 ]
[ 0, 1, 3 ]
[ 0, 1, 2 ]


Get all Combinations filtered from all possible Subsets (an inefficient way to generate combinations)
o = Abacus.Subset(6).filterBy(Abacus.Filter.LEN(3))
o.total() /* with filtering applied .total() and some other functions still return original data not the filtered ones */
64
default order is "lex", lexicographic-order
[ 0, 1, 2 ]
[ 0, 1, 3 ]
[ 0, 1, 4 ]
[ 0, 1, 5 ]
[ 0, 2, 3 ]
[ 0, 2, 4 ]
[ 0, 2, 5 ]
[ 0, 3, 4 ]
[ 0, 3, 5 ]
[ 0, 4, 5 ]
[ 1, 2, 3 ]
[ 1, 2, 4 ]
[ 1, 2, 5 ]
[ 1, 3, 4 ]
[ 1, 3, 5 ]
[ 1, 4, 5 ]
[ 2, 3, 4 ]
[ 2, 3, 5 ]
[ 2, 4, 5 ]
[ 3, 4, 5 ]
backwards
o.rewind(-1)
[ 3, 4, 5 ]
[ 2, 4, 5 ]
[ 2, 3, 5 ]
[ 2, 3, 4 ]
[ 1, 4, 5 ]
[ 1, 3, 5 ]
[ 1, 3, 4 ]
[ 1, 2, 5 ]
[ 1, 2, 4 ]
[ 1, 2, 3 ]
[ 0, 4, 5 ]
[ 0, 3, 5 ]
[ 0, 3, 4 ]
[ 0, 2, 5 ]
[ 0, 2, 4 ]
[ 0, 2, 3 ]
[ 0, 1, 5 ]
[ 0, 1, 4 ]
[ 0, 1, 3 ]
[ 0, 1, 2 ]


Get all Variations filtered from all possible Tuples (an inefficient way to generate variations)
o = Abacus.Tensor(3,6,{"type":"tuple"}).filterBy(Abacus.Filter.UNIQUE()
o.total() /* with filtering applied .total() and some other functions still return original data not the filtered ones */
216
default order is "lex", lexicographic-order
[ 0, 1, 2 ]
[ 0, 1, 3 ]
[ 0, 1, 4 ]
[ 0, 1, 5 ]
[ 0, 2, 1 ]
[ 0, 2, 3 ]
[ 0, 2, 4 ]
[ 0, 2, 5 ]
[ 0, 3, 1 ]
[ 0, 3, 2 ]
[ 0, 3, 4 ]
[ 0, 3, 5 ]
[ 0, 4, 1 ]
[ 0, 4, 2 ]
[ 0, 4, 3 ]
[ 0, 4, 5 ]
[ 0, 5, 1 ]
[ 0, 5, 2 ]
[ 0, 5, 3 ]
[ 0, 5, 4 ]
[ 1, 0, 2 ]
[ 1, 0, 3 ]
[ 1, 0, 4 ]
[ 1, 0, 5 ]
[ 1, 2, 0 ]
[ 1, 2, 3 ]
[ 1, 2, 4 ]
[ 1, 2, 5 ]
[ 1, 3, 0 ]
[ 1, 3, 2 ]
[ 1, 3, 4 ]
[ 1, 3, 5 ]
[ 1, 4, 0 ]
[ 1, 4, 2 ]
[ 1, 4, 3 ]
[ 1, 4, 5 ]
[ 1, 5, 0 ]
[ 1, 5, 2 ]
[ 1, 5, 3 ]
[ 1, 5, 4 ]
[ 2, 0, 1 ]
[ 2, 0, 3 ]
[ 2, 0, 4 ]
[ 2, 0, 5 ]
[ 2, 1, 0 ]
[ 2, 1, 3 ]
[ 2, 1, 4 ]
[ 2, 1, 5 ]
[ 2, 3, 0 ]
[ 2, 3, 1 ]
[ 2, 3, 4 ]
[ 2, 3, 5 ]
[ 2, 4, 0 ]
[ 2, 4, 1 ]
[ 2, 4, 3 ]
[ 2, 4, 5 ]
[ 2, 5, 0 ]
[ 2, 5, 1 ]
[ 2, 5, 3 ]
[ 2, 5, 4 ]
[ 3, 0, 1 ]
[ 3, 0, 2 ]
[ 3, 0, 4 ]
[ 3, 0, 5 ]
[ 3, 1, 0 ]
[ 3, 1, 2 ]
[ 3, 1, 4 ]
[ 3, 1, 5 ]
[ 3, 2, 0 ]
[ 3, 2, 1 ]
[ 3, 2, 4 ]
[ 3, 2, 5 ]
[ 3, 4, 0 ]
[ 3, 4, 1 ]
[ 3, 4, 2 ]
[ 3, 4, 5 ]
[ 3, 5, 0 ]
[ 3, 5, 1 ]
[ 3, 5, 2 ]
[ 3, 5, 4 ]
[ 4, 0, 1 ]
[ 4, 0, 2 ]
[ 4, 0, 3 ]
[ 4, 0, 5 ]
[ 4, 1, 0 ]
[ 4, 1, 2 ]
[ 4, 1, 3 ]
[ 4, 1, 5 ]
[ 4, 2, 0 ]
[ 4, 2, 1 ]
[ 4, 2, 3 ]
[ 4, 2, 5 ]
[ 4, 3, 0 ]
[ 4, 3, 1 ]
[ 4, 3, 2 ]
[ 4, 3, 5 ]
[ 4, 5, 0 ]
[ 4, 5, 1 ]
[ 4, 5, 2 ]
[ 4, 5, 3 ]
[ 5, 0, 1 ]
[ 5, 0, 2 ]
[ 5, 0, 3 ]
[ 5, 0, 4 ]
[ 5, 1, 0 ]
[ 5, 1, 2 ]
[ 5, 1, 3 ]
[ 5, 1, 4 ]
[ 5, 2, 0 ]
[ 5, 2, 1 ]
[ 5, 2, 3 ]
[ 5, 2, 4 ]
[ 5, 3, 0 ]
[ 5, 3, 1 ]
[ 5, 3, 2 ]
[ 5, 3, 4 ]
[ 5, 4, 0 ]
[ 5, 4, 1 ]
[ 5, 4, 2 ]
[ 5, 4, 3 ]
backwards
o.rewind(-1)
[ 5, 4, 3 ]
[ 5, 4, 2 ]
[ 5, 4, 1 ]
[ 5, 4, 0 ]
[ 5, 3, 4 ]
[ 5, 3, 2 ]
[ 5, 3, 1 ]
[ 5, 3, 0 ]
[ 5, 2, 4 ]
[ 5, 2, 3 ]
[ 5, 2, 1 ]
[ 5, 2, 0 ]
[ 5, 1, 4 ]
[ 5, 1, 3 ]
[ 5, 1, 2 ]
[ 5, 1, 0 ]
[ 5, 0, 4 ]
[ 5, 0, 3 ]
[ 5, 0, 2 ]
[ 5, 0, 1 ]
[ 4, 5, 3 ]
[ 4, 5, 2 ]
[ 4, 5, 1 ]
[ 4, 5, 0 ]
[ 4, 3, 5 ]
[ 4, 3, 2 ]
[ 4, 3, 1 ]
[ 4, 3, 0 ]
[ 4, 2, 5 ]
[ 4, 2, 3 ]
[ 4, 2, 1 ]
[ 4, 2, 0 ]
[ 4, 1, 5 ]
[ 4, 1, 3 ]
[ 4, 1, 2 ]
[ 4, 1, 0 ]
[ 4, 0, 5 ]
[ 4, 0, 3 ]
[ 4, 0, 2 ]
[ 4, 0, 1 ]
[ 3, 5, 4 ]
[ 3, 5, 2 ]
[ 3, 5, 1 ]
[ 3, 5, 0 ]
[ 3, 4, 5 ]
[ 3, 4, 2 ]
[ 3, 4, 1 ]
[ 3, 4, 0 ]
[ 3, 2, 5 ]
[ 3, 2, 4 ]
[ 3, 2, 1 ]
[ 3, 2, 0 ]
[ 3, 1, 5 ]
[ 3, 1, 4 ]
[ 3, 1, 2 ]
[ 3, 1, 0 ]
[ 3, 0, 5 ]
[ 3, 0, 4 ]
[ 3, 0, 2 ]
[ 3, 0, 1 ]
[ 2, 5, 4 ]
[ 2, 5, 3 ]
[ 2, 5, 1 ]
[ 2, 5, 0 ]
[ 2, 4, 5 ]
[ 2, 4, 3 ]
[ 2, 4, 1 ]
[ 2, 4, 0 ]
[ 2, 3, 5 ]
[ 2, 3, 4 ]
[ 2, 3, 1 ]
[ 2, 3, 0 ]
[ 2, 1, 5 ]
[ 2, 1, 4 ]
[ 2, 1, 3 ]
[ 2, 1, 0 ]
[ 2, 0, 5 ]
[ 2, 0, 4 ]
[ 2, 0, 3 ]
[ 2, 0, 1 ]
[ 1, 5, 4 ]
[ 1, 5, 3 ]
[ 1, 5, 2 ]
[ 1, 5, 0 ]
[ 1, 4, 5 ]
[ 1, 4, 3 ]
[ 1, 4, 2 ]
[ 1, 4, 0 ]
[ 1, 3, 5 ]
[ 1, 3, 4 ]
[ 1, 3, 2 ]
[ 1, 3, 0 ]
[ 1, 2, 5 ]
[ 1, 2, 4 ]
[ 1, 2, 3 ]
[ 1, 2, 0 ]
[ 1, 0, 5 ]
[ 1, 0, 4 ]
[ 1, 0, 3 ]
[ 1, 0, 2 ]
[ 0, 5, 4 ]
[ 0, 5, 3 ]
[ 0, 5, 2 ]
[ 0, 5, 1 ]
[ 0, 4, 5 ]
[ 0, 4, 3 ]
[ 0, 4, 2 ]
[ 0, 4, 1 ]
[ 0, 3, 5 ]
[ 0, 3, 4 ]
[ 0, 3, 2 ]
[ 0, 3, 1 ]
[ 0, 2, 5 ]
[ 0, 2, 4 ]
[ 0, 2, 3 ]
[ 0, 2, 1 ]
[ 0, 1, 5 ]
[ 0, 1, 4 ]
[ 0, 1, 3 ]
[ 0, 1, 2 ]


Get all Repeated Combinations filtered from all possible Tuples (an inefficient way to generate combinations)
o = Abacus.Tensor(3,6,{"type":"tuple"}).filterBy(Abacus.Filter.SORTED("<=")
o.total() /* with filtering applied .total() and some other functions still return original data not the filtered ones */
216
default order is "lex", lexicographic-order
[ 0, 0, 0 ]
[ 0, 0, 1 ]
[ 0, 0, 2 ]
[ 0, 0, 3 ]
[ 0, 0, 4 ]
[ 0, 0, 5 ]
[ 0, 1, 1 ]
[ 0, 1, 2 ]
[ 0, 1, 3 ]
[ 0, 1, 4 ]
[ 0, 1, 5 ]
[ 0, 2, 2 ]
[ 0, 2, 3 ]
[ 0, 2, 4 ]
[ 0, 2, 5 ]
[ 0, 3, 3 ]
[ 0, 3, 4 ]
[ 0, 3, 5 ]
[ 0, 4, 4 ]
[ 0, 4, 5 ]
[ 0, 5, 5 ]
[ 1, 1, 1 ]
[ 1, 1, 2 ]
[ 1, 1, 3 ]
[ 1, 1, 4 ]
[ 1, 1, 5 ]
[ 1, 2, 2 ]
[ 1, 2, 3 ]
[ 1, 2, 4 ]
[ 1, 2, 5 ]
[ 1, 3, 3 ]
[ 1, 3, 4 ]
[ 1, 3, 5 ]
[ 1, 4, 4 ]
[ 1, 4, 5 ]
[ 1, 5, 5 ]
[ 2, 2, 2 ]
[ 2, 2, 3 ]
[ 2, 2, 4 ]
[ 2, 2, 5 ]
[ 2, 3, 3 ]
[ 2, 3, 4 ]
[ 2, 3, 5 ]
[ 2, 4, 4 ]
[ 2, 4, 5 ]
[ 2, 5, 5 ]
[ 3, 3, 3 ]
[ 3, 3, 4 ]
[ 3, 3, 5 ]
[ 3, 4, 4 ]
[ 3, 4, 5 ]
[ 3, 5, 5 ]
[ 4, 4, 4 ]
[ 4, 4, 5 ]
[ 4, 5, 5 ]
[ 5, 5, 5 ]
backwards
o.rewind(-1)
[ 5, 5, 5 ]
[ 4, 5, 5 ]
[ 4, 4, 5 ]
[ 4, 4, 4 ]
[ 3, 5, 5 ]
[ 3, 4, 5 ]
[ 3, 4, 4 ]
[ 3, 3, 5 ]
[ 3, 3, 4 ]
[ 3, 3, 3 ]
[ 2, 5, 5 ]
[ 2, 4, 5 ]
[ 2, 4, 4 ]
[ 2, 3, 5 ]
[ 2, 3, 4 ]
[ 2, 3, 3 ]
[ 2, 2, 5 ]
[ 2, 2, 4 ]
[ 2, 2, 3 ]
[ 2, 2, 2 ]
[ 1, 5, 5 ]
[ 1, 4, 5 ]
[ 1, 4, 4 ]
[ 1, 3, 5 ]
[ 1, 3, 4 ]
[ 1, 3, 3 ]
[ 1, 2, 5 ]
[ 1, 2, 4 ]
[ 1, 2, 3 ]
[ 1, 2, 2 ]
[ 1, 1, 5 ]
[ 1, 1, 4 ]
[ 1, 1, 3 ]
[ 1, 1, 2 ]
[ 1, 1, 1 ]
[ 0, 5, 5 ]
[ 0, 4, 5 ]
[ 0, 4, 4 ]
[ 0, 3, 5 ]
[ 0, 3, 4 ]
[ 0, 3, 3 ]
[ 0, 2, 5 ]
[ 0, 2, 4 ]
[ 0, 2, 3 ]
[ 0, 2, 2 ]
[ 0, 1, 5 ]
[ 0, 1, 4 ]
[ 0, 1, 3 ]
[ 0, 1, 2 ]
[ 0, 1, 1 ]
[ 0, 0, 5 ]
[ 0, 0, 4 ]
[ 0, 0, 3 ]
[ 0, 0, 2 ]
[ 0, 0, 1 ]
[ 0, 0, 0 ]


