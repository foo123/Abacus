Abacus.Compositions Filtered (VERSION = 1.0.0)
---
o = Abacus.Partition(10,{type:"composition"}).filterBy(Abacus.Filter.UNIQUE())
o.total() /* with filtering applied .total() and some other functions still return original data not the filtered ones */
512
default order is "lex", lexicographic-order
[ 1, 2, 3, 4 ]
[ 1, 2, 4, 3 ]
[ 1, 2, 7 ]
[ 1, 3, 2, 4 ]
[ 1, 3, 4, 2 ]
[ 1, 3, 6 ]
[ 1, 4, 2, 3 ]
[ 1, 4, 3, 2 ]
[ 1, 4, 5 ]
[ 1, 5, 4 ]
[ 1, 6, 3 ]
[ 1, 7, 2 ]
[ 1, 9 ]
[ 2, 1, 3, 4 ]
[ 2, 1, 4, 3 ]
[ 2, 1, 7 ]
[ 2, 3, 1, 4 ]
[ 2, 3, 4, 1 ]
[ 2, 3, 5 ]
[ 2, 4, 1, 3 ]
[ 2, 4, 3, 1 ]
[ 2, 5, 3 ]
[ 2, 7, 1 ]
[ 2, 8 ]
[ 3, 1, 2, 4 ]
[ 3, 1, 4, 2 ]
[ 3, 1, 6 ]
[ 3, 2, 1, 4 ]
[ 3, 2, 4, 1 ]
[ 3, 2, 5 ]
[ 3, 4, 1, 2 ]
[ 3, 4, 2, 1 ]
[ 3, 5, 2 ]
[ 3, 6, 1 ]
[ 3, 7 ]
[ 4, 1, 2, 3 ]
[ 4, 1, 3, 2 ]
[ 4, 1, 5 ]
[ 4, 2, 1, 3 ]
[ 4, 2, 3, 1 ]
[ 4, 3, 1, 2 ]
[ 4, 3, 2, 1 ]
[ 4, 5, 1 ]
[ 4, 6 ]
[ 5, 1, 4 ]
[ 5, 2, 3 ]
[ 5, 3, 2 ]
[ 5, 4, 1 ]
[ 6, 1, 3 ]
[ 6, 3, 1 ]
[ 6, 4 ]
[ 7, 1, 2 ]
[ 7, 2, 1 ]
[ 7, 3 ]
[ 8, 2 ]
[ 9, 1 ]
[ 10 ]
backwards
o.rewind(-1)
[ 10 ]
[ 9, 1 ]
[ 8, 2 ]
[ 7, 3 ]
[ 7, 2, 1 ]
[ 7, 1, 2 ]
[ 6, 4 ]
[ 6, 3, 1 ]
[ 6, 1, 3 ]
[ 5, 4, 1 ]
[ 5, 3, 2 ]
[ 5, 2, 3 ]
[ 5, 1, 4 ]
[ 4, 6 ]
[ 4, 5, 1 ]
[ 4, 3, 2, 1 ]
[ 4, 3, 1, 2 ]
[ 4, 2, 3, 1 ]
[ 4, 2, 1, 3 ]
[ 4, 1, 5 ]
[ 4, 1, 3, 2 ]
[ 4, 1, 2, 3 ]
[ 3, 7 ]
[ 3, 6, 1 ]
[ 3, 5, 2 ]
[ 3, 4, 2, 1 ]
[ 3, 4, 1, 2 ]
[ 3, 2, 5 ]
[ 3, 2, 4, 1 ]
[ 3, 2, 1, 4 ]
[ 3, 1, 6 ]
[ 3, 1, 4, 2 ]
[ 3, 1, 2, 4 ]
[ 2, 8 ]
[ 2, 7, 1 ]
[ 2, 5, 3 ]
[ 2, 4, 3, 1 ]
[ 2, 4, 1, 3 ]
[ 2, 3, 5 ]
[ 2, 3, 4, 1 ]
[ 2, 3, 1, 4 ]
[ 2, 1, 7 ]
[ 2, 1, 4, 3 ]
[ 2, 1, 3, 4 ]
[ 1, 9 ]
[ 1, 7, 2 ]
[ 1, 6, 3 ]
[ 1, 5, 4 ]
[ 1, 4, 5 ]
[ 1, 4, 3, 2 ]
[ 1, 4, 2, 3 ]
[ 1, 3, 6 ]
[ 1, 3, 4, 2 ]
[ 1, 3, 2, 4 ]
[ 1, 2, 7 ]
[ 1, 2, 4, 3 ]
[ 1, 2, 3, 4 ]
o = Abacus.Partition(10,{type:"composition"}).filterBy(Abacus.Filter.LEN(4).AND(Abacus.Filter.MAX(3)))
o.total() /* with filtering applied .total() and some other functions still return original data not the filtered ones */
512
default order is "lex", lexicographic-order
[ 1, 3, 3, 3 ]
[ 2, 2, 3, 3 ]
[ 2, 3, 2, 3 ]
[ 2, 3, 3, 2 ]
[ 3, 1, 3, 3 ]
[ 3, 2, 2, 3 ]
[ 3, 2, 3, 2 ]
[ 3, 3, 1, 3 ]
[ 3, 3, 2, 2 ]
[ 3, 3, 3, 1 ]
backwards
o.rewind(-1)
[ 3, 3, 3, 1 ]
[ 3, 3, 2, 2 ]
[ 3, 3, 1, 3 ]
[ 3, 2, 3, 2 ]
[ 3, 2, 2, 3 ]
[ 3, 1, 3, 3 ]
[ 2, 3, 3, 2 ]
[ 2, 3, 2, 3 ]
[ 2, 2, 3, 3 ]
[ 1, 3, 3, 3 ]
