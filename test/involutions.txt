Abacus.Permutations (VERSION = 1.0.7)
---
o = Abacus.Permutation(2,{type:"involution"})
o.total()
2
o.rewind()
[ '0,1', 0, 0, '0,1' ]
[ '1,0', 1, 1, '1,0' ]
o.rewind(-1)
1,0
o.random()
1,0
o = Abacus.Permutation(3,{type:"involution"})
o.total()
4
o.rewind()
[ '0,1,2', 0, 0, '0,1,2' ]
[ '0,2,1', 1, 1, '0,2,1' ]
[ '2,1,0', 2, 2, '2,1,0' ]
[ '1,0,2', 3, 3, '1,0,2' ]
o.rewind(-1)
1,0,2
o.random()
0,2,1
o = Abacus.Permutation(4,{type:"involution"})
o.total()
10
o.rewind()
[ '0,1,2,3', 0, 0, '0,1,2,3' ]
[ '0,1,3,2', 1, 1, '0,1,3,2' ]
[ '0,3,2,1', 2, 2, '0,3,2,1' ]
[ '3,1,2,0', 3, 3, '3,1,2,0' ]
[ '0,2,1,3', 4, 4, '0,2,1,3' ]
[ '3,2,1,0', 5, 5, '3,2,1,0' ]
[ '2,1,0,3', 6, 6, '2,1,0,3' ]
[ '2,3,0,1', 7, 7, '2,3,0,1' ]
[ '1,0,2,3', 8, 8, '1,0,2,3' ]
[ '1,0,3,2', 9, 9, '1,0,3,2' ]
o.rewind(-1)
1,0,3,2
o.random()
0,1,3,2
o = Abacus.Permutation(6,{type:"involution"})
o.total()
76
o.rewind()
[ '0,1,2,3,4,5', 0, 0, '0,1,2,3,4,5' ]
[ '0,1,2,3,5,4', 1, 1, '0,1,2,3,5,4' ]
[ '0,1,2,5,4,3', 2, 2, '0,1,2,5,4,3' ]
[ '0,1,5,3,4,2', 3, 3, '0,1,5,3,4,2' ]
[ '0,5,2,3,4,1', 4, 4, '0,5,2,3,4,1' ]
[ '5,1,2,3,4,0', 5, 5, '5,1,2,3,4,0' ]
[ '0,1,2,4,3,5', 6, 6, '0,1,2,4,3,5' ]
[ '0,1,5,4,3,2', 7, 7, '0,1,5,4,3,2' ]
[ '0,5,2,4,3,1', 8, 8, '0,5,2,4,3,1' ]
[ '5,1,2,4,3,0', 9, 9, '5,1,2,4,3,0' ]
[ '0,1,4,3,2,5', 10, 10, '0,1,4,3,2,5' ]
[ '0,1,4,5,2,3', 11, 11, '0,1,4,5,2,3' ]
[ '0,5,4,3,2,1', 12, 12, '0,5,4,3,2,1' ]
[ '5,1,4,3,2,0', 13, 13, '5,1,4,3,2,0' ]
[ '0,4,2,3,1,5', 14, 14, '0,4,2,3,1,5' ]
[ '0,4,2,5,1,3', 15, 15, '0,4,2,5,1,3' ]
[ '0,4,5,3,1,2', 16, 16, '0,4,5,3,1,2' ]
[ '5,4,2,3,1,0', 17, 17, '5,4,2,3,1,0' ]
[ '4,1,2,3,0,5', 18, 18, '4,1,2,3,0,5' ]
[ '4,1,2,5,0,3', 19, 19, '4,1,2,5,0,3' ]
[ '4,1,5,3,0,2', 20, 20, '4,1,5,3,0,2' ]
[ '4,5,2,3,0,1', 21, 21, '4,5,2,3,0,1' ]
[ '0,1,3,2,4,5', 22, 22, '0,1,3,2,4,5' ]
[ '0,1,3,2,5,4', 23, 23, '0,1,3,2,5,4' ]
[ '0,5,3,2,4,1', 24, 24, '0,5,3,2,4,1' ]
[ '5,1,3,2,4,0', 25, 25, '5,1,3,2,4,0' ]
[ '0,4,3,2,1,5', 26, 26, '0,4,3,2,1,5' ]
[ '5,4,3,2,1,0', 27, 27, '5,4,3,2,1,0' ]
[ '4,1,3,2,0,5', 28, 28, '4,1,3,2,0,5' ]
[ '4,5,3,2,0,1', 29, 29, '4,5,3,2,0,1' ]
[ '0,3,2,1,4,5', 30, 30, '0,3,2,1,4,5' ]
[ '0,3,2,1,5,4', 31, 31, '0,3,2,1,5,4' ]
[ '0,3,5,1,4,2', 32, 32, '0,3,5,1,4,2' ]
[ '5,3,2,1,4,0', 33, 33, '5,3,2,1,4,0' ]
[ '0,3,4,1,2,5', 34, 34, '0,3,4,1,2,5' ]
[ '5,3,4,1,2,0', 35, 35, '5,3,4,1,2,0' ]
[ '4,3,2,1,0,5', 36, 36, '4,3,2,1,0,5' ]
[ '4,3,5,1,0,2', 37, 37, '4,3,5,1,0,2' ]
[ '3,1,2,0,4,5', 38, 38, '3,1,2,0,4,5' ]
[ '3,1,2,0,5,4', 39, 39, '3,1,2,0,5,4' ]
[ '3,1,5,0,4,2', 40, 40, '3,1,5,0,4,2' ]
[ '3,5,2,0,4,1', 41, 41, '3,5,2,0,4,1' ]
[ '3,1,4,0,2,5', 42, 42, '3,1,4,0,2,5' ]
[ '3,5,4,0,2,1', 43, 43, '3,5,4,0,2,1' ]
[ '3,4,2,0,1,5', 44, 44, '3,4,2,0,1,5' ]
[ '3,4,5,0,1,2', 45, 45, '3,4,5,0,1,2' ]
[ '0,2,1,3,4,5', 46, 46, '0,2,1,3,4,5' ]
[ '0,2,1,3,5,4', 47, 47, '0,2,1,3,5,4' ]
[ '0,2,1,5,4,3', 48, 48, '0,2,1,5,4,3' ]
[ '5,2,1,3,4,0', 49, 49, '5,2,1,3,4,0' ]
[ '0,2,1,4,3,5', 50, 50, '0,2,1,4,3,5' ]
[ '5,2,1,4,3,0', 51, 51, '5,2,1,4,3,0' ]
[ '4,2,1,3,0,5', 52, 52, '4,2,1,3,0,5' ]
[ '4,2,1,5,0,3', 53, 53, '4,2,1,5,0,3' ]
[ '3,2,1,0,4,5', 54, 54, '3,2,1,0,4,5' ]
[ '3,2,1,0,5,4', 55, 55, '3,2,1,0,5,4' ]
[ '2,1,0,3,4,5', 56, 56, '2,1,0,3,4,5' ]
[ '2,1,0,3,5,4', 57, 57, '2,1,0,3,5,4' ]
[ '2,1,0,5,4,3', 58, 58, '2,1,0,5,4,3' ]
[ '2,5,0,3,4,1', 59, 59, '2,5,0,3,4,1' ]
[ '2,1,0,4,3,5', 60, 60, '2,1,0,4,3,5' ]
[ '2,5,0,4,3,1', 61, 61, '2,5,0,4,3,1' ]
[ '2,4,0,3,1,5', 62, 62, '2,4,0,3,1,5' ]
[ '2,4,0,5,1,3', 63, 63, '2,4,0,5,1,3' ]
[ '2,3,0,1,4,5', 64, 64, '2,3,0,1,4,5' ]
[ '2,3,0,1,5,4', 65, 65, '2,3,0,1,5,4' ]
[ '1,0,2,3,4,5', 66, 66, '1,0,2,3,4,5' ]
[ '1,0,2,3,5,4', 67, 67, '1,0,2,3,5,4' ]
[ '1,0,2,5,4,3', 68, 68, '1,0,2,5,4,3' ]
[ '1,0,5,3,4,2', 69, 69, '1,0,5,3,4,2' ]
[ '1,0,2,4,3,5', 70, 70, '1,0,2,4,3,5' ]
[ '1,0,5,4,3,2', 71, 71, '1,0,5,4,3,2' ]
[ '1,0,4,3,2,5', 72, 72, '1,0,4,3,2,5' ]
[ '1,0,4,5,2,3', 73, 73, '1,0,4,5,2,3' ]
[ '1,0,3,2,4,5', 74, 74, '1,0,3,2,4,5' ]
[ '1,0,3,2,5,4', 75, 75, '1,0,3,2,5,4' ]
o.rewind(-1)
1,0,3,2,5,4
o.random()
3,5,4,0,2,1
o = Abacus.Permutation(5).filterBy(Abacus.Permutation.isInvolution)
o.total() /* with filtering applied .total() and some other functions still return original data not the filtered ones */
120
default order is "lex", lexicographic-order
o.rewind()
0,1,2,3,4
0,1,2,4,3
0,1,3,2,4
0,1,4,3,2
0,2,1,3,4
0,2,1,4,3
0,3,2,1,4
0,3,4,1,2
0,4,2,3,1
0,4,3,2,1
1,0,2,3,4
1,0,2,4,3
1,0,3,2,4
1,0,4,3,2
2,1,0,3,4
2,1,0,4,3
2,3,0,1,4
2,4,0,3,1
3,1,2,0,4
3,1,4,0,2
3,2,1,0,4
3,4,2,0,1
4,1,2,3,0
4,1,3,2,0
4,2,1,3,0
4,3,2,1,0
o.random()
0,3,4,1,2
o = Abacus.Permutation(6).filterBy(Abacus.Permutation.isInvolution)
o.total() /* with filtering applied .total() and some other functions still return original data not the filtered ones */
720
default order is "lex", lexicographic-order
o.rewind()
0,1,2,3,4,5
0,1,2,3,5,4
0,1,2,4,3,5
0,1,2,5,4,3
0,1,3,2,4,5
0,1,3,2,5,4
0,1,4,3,2,5
0,1,4,5,2,3
0,1,5,3,4,2
0,1,5,4,3,2
0,2,1,3,4,5
0,2,1,3,5,4
0,2,1,4,3,5
0,2,1,5,4,3
0,3,2,1,4,5
0,3,2,1,5,4
0,3,4,1,2,5
0,3,5,1,4,2
0,4,2,3,1,5
0,4,2,5,1,3
0,4,3,2,1,5
0,4,5,3,1,2
0,5,2,3,4,1
0,5,2,4,3,1
0,5,3,2,4,1
0,5,4,3,2,1
1,0,2,3,4,5
1,0,2,3,5,4
1,0,2,4,3,5
1,0,2,5,4,3
1,0,3,2,4,5
1,0,3,2,5,4
1,0,4,3,2,5
1,0,4,5,2,3
1,0,5,3,4,2
1,0,5,4,3,2
2,1,0,3,4,5
2,1,0,3,5,4
2,1,0,4,3,5
2,1,0,5,4,3
2,3,0,1,4,5
2,3,0,1,5,4
2,4,0,3,1,5
2,4,0,5,1,3
2,5,0,3,4,1
2,5,0,4,3,1
3,1,2,0,4,5
3,1,2,0,5,4
3,1,4,0,2,5
3,1,5,0,4,2
3,2,1,0,4,5
3,2,1,0,5,4
3,4,2,0,1,5
3,4,5,0,1,2
3,5,2,0,4,1
3,5,4,0,2,1
4,1,2,3,0,5
4,1,2,5,0,3
4,1,3,2,0,5
4,1,5,3,0,2
4,2,1,3,0,5
4,2,1,5,0,3
4,3,2,1,0,5
4,3,5,1,0,2
4,5,2,3,0,1
4,5,3,2,0,1
5,1,2,3,4,0
5,1,2,4,3,0
5,1,3,2,4,0
5,1,4,3,2,0
5,2,1,3,4,0
5,2,1,4,3,0
5,3,2,1,4,0
5,3,4,1,2,0
5,4,2,3,1,0
5,4,3,2,1,0
o.random()
3,4,5,0,1,2
