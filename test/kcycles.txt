Abacus.Permutations (VERSION = 1.0.8)
---
o = Abacus.Permutation(5,{"cycles=":3})
35
o.rewind()
0,1,3,4,2
0,1,4,2,3
0,4,3,2,1
4,1,3,2,0
0,3,4,1,2
0,3,2,4,1
0,4,2,1,3
4,3,2,1,0
3,1,4,0,2
3,4,2,0,1
3,1,2,4,0
4,1,2,0,3
0,2,1,4,3
0,2,4,3,1
0,4,1,3,2
4,2,1,3,0
0,2,3,1,4
0,3,1,2,4
3,2,1,0,4
2,1,0,4,3
2,4,0,3,1
2,1,4,3,0
4,1,0,3,2
2,3,0,1,4
2,1,3,0,4
3,1,0,2,4
1,0,2,4,3
1,0,4,3,2
1,4,2,3,0
4,0,2,3,1
1,0,3,2,4
1,3,2,0,4
3,0,2,1,4
1,2,0,3,4
2,0,1,3,4
o.rewind(-1)
2,0,1,3,4
1,2,0,3,4
3,0,2,1,4
1,3,2,0,4
1,0,3,2,4
4,0,2,3,1
1,4,2,3,0
1,0,4,3,2
1,0,2,4,3
3,1,0,2,4
2,1,3,0,4
2,3,0,1,4
4,1,0,3,2
2,1,4,3,0
2,4,0,3,1
2,1,0,4,3
3,2,1,0,4
0,3,1,2,4
0,2,3,1,4
4,2,1,3,0
0,4,1,3,2
0,2,4,3,1
0,2,1,4,3
4,1,2,0,3
3,1,2,4,0
3,4,2,0,1
3,1,4,0,2
4,3,2,1,0
0,4,2,1,3
0,3,2,4,1
0,3,4,1,2
4,1,3,2,0
0,4,3,2,1
0,1,4,2,3
0,1,3,4,2
o.order("lex,reversed")
2,0,1,3,4
1,2,0,3,4
3,0,2,1,4
1,3,2,0,4
1,0,3,2,4
4,0,2,3,1
1,4,2,3,0
1,0,4,3,2
1,0,2,4,3
3,1,0,2,4
2,1,3,0,4
2,3,0,1,4
4,1,0,3,2
2,1,4,3,0
2,4,0,3,1
2,1,0,4,3
3,2,1,0,4
0,3,1,2,4
0,2,3,1,4
4,2,1,3,0
0,4,1,3,2
0,2,4,3,1
0,2,1,4,3
4,1,2,0,3
3,1,2,4,0
3,4,2,0,1
3,1,4,0,2
4,3,2,1,0
0,4,2,1,3
0,3,2,4,1
0,3,4,1,2
4,1,3,2,0
0,4,3,2,1
0,1,4,2,3
0,1,3,4,2
o.order("colex")
0,1,4,2,3
0,1,3,4,2
0,4,3,2,1
4,1,3,2,0
0,3,4,1,2
0,4,2,1,3
0,3,2,4,1
4,3,2,1,0
3,1,4,0,2
3,4,2,0,1
4,1,2,0,3
3,1,2,4,0
0,2,1,4,3
0,4,1,3,2
0,2,4,3,1
4,2,1,3,0
0,3,1,2,4
0,2,3,1,4
3,2,1,0,4
2,1,0,4,3
2,4,0,3,1
4,1,0,3,2
2,1,4,3,0
2,3,0,1,4
3,1,0,2,4
2,1,3,0,4
1,0,2,4,3
1,0,4,3,2
4,0,2,3,1
1,4,2,3,0
1,0,3,2,4
3,0,2,1,4
1,3,2,0,4
2,0,1,3,4
1,2,0,3,4
o.order("colex,reversed")
1,2,0,3,4
2,0,1,3,4
1,3,2,0,4
3,0,2,1,4
1,0,3,2,4
1,4,2,3,0
4,0,2,3,1
1,0,4,3,2
1,0,2,4,3
2,1,3,0,4
3,1,0,2,4
2,3,0,1,4
2,1,4,3,0
4,1,0,3,2
2,4,0,3,1
2,1,0,4,3
3,2,1,0,4
0,2,3,1,4
0,3,1,2,4
4,2,1,3,0
0,2,4,3,1
0,4,1,3,2
0,2,1,4,3
3,1,2,4,0
4,1,2,0,3
3,4,2,0,1
3,1,4,0,2
4,3,2,1,0
0,3,2,4,1
0,4,2,1,3
0,3,4,1,2
4,1,3,2,0
0,4,3,2,1
0,1,3,4,2
0,1,4,2,3
o.order("random")
1,0,4,3,2
2,1,3,0,4
4,3,2,1,0
2,3,0,1,4
2,4,0,3,1
0,3,1,2,4
0,2,1,4,3
2,3,0,1,4
3,1,0,2,4
3,2,1,0,4
0,3,4,1,2
4,1,3,2,0
1,0,3,2,4
2,4,0,3,1
2,3,0,1,4
4,2,1,3,0
0,3,4,1,2
3,2,1,0,4
2,1,0,4,3
1,0,3,2,4
0,3,4,1,2
1,0,3,2,4
2,3,0,1,4
3,1,2,4,0
1,2,0,3,4
0,4,3,2,1
1,0,3,2,4
1,0,4,3,2
0,2,1,4,3
4,2,1,3,0
0,3,4,1,2
0,2,1,4,3
0,4,3,2,1
2,1,0,4,3
2,4,0,3,1
o = Abacus.SetPartition(5, {"parts=":3}).fuse((partition, permutation) => {    if (!Array.isArray(permutation[0])) permutation = [permutation];    return Abacus.Permutation.fromCycles(partition.filter(p => 1 < p.length).map((p, i) => [p[p.length-1]].concat(Abacus.Permutation.permute(p.slice(0, -1), permutation[i], true))), 5);}, Abacus.CombinatorialProxy(item => item.reverse().reduce((p,i) => 1 < i.length ? Abacus.Permutation(i.length-1).juxtaposeWith(p) : p, null)))
35
o.rewind()
0,1,3,4,2
0,1,4,2,3
0,4,3,2,1
4,1,3,2,0
0,3,4,1,2
0,3,2,4,1
0,4,2,1,3
4,3,2,1,0
3,1,4,0,2
3,4,2,0,1
3,1,2,4,0
4,1,2,0,3
0,2,1,4,3
0,2,4,3,1
0,4,1,3,2
4,2,1,3,0
0,2,3,1,4
0,3,1,2,4
3,2,1,0,4
2,1,0,4,3
2,4,0,3,1
2,1,4,3,0
4,1,0,3,2
2,3,0,1,4
2,1,3,0,4
3,1,0,2,4
1,0,2,4,3
1,0,4,3,2
1,4,2,3,0
4,0,2,3,1
1,0,3,2,4
1,3,2,0,4
3,0,2,1,4
1,2,0,3,4
2,0,1,3,4
o.rewind(-1)
2,0,1,3,4
1,2,0,3,4
3,0,2,1,4
1,3,2,0,4
1,0,3,2,4
4,0,2,3,1
1,4,2,3,0
1,0,4,3,2
1,0,2,4,3
3,1,0,2,4
2,1,3,0,4
2,3,0,1,4
4,1,0,3,2
2,1,4,3,0
2,4,0,3,1
2,1,0,4,3
3,2,1,0,4
0,3,1,2,4
0,2,3,1,4
4,2,1,3,0
0,4,1,3,2
0,2,4,3,1
0,2,1,4,3
4,1,2,0,3
3,1,2,4,0
3,4,2,0,1
3,1,4,0,2
4,3,2,1,0
0,4,2,1,3
0,3,2,4,1
0,3,4,1,2
4,1,3,2,0
0,4,3,2,1
0,1,4,2,3
0,1,3,4,2
o.dispose()
