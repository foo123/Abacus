Abacus.Matrices (VERSION = 1.0.0)
---
Matrices and Matrix operations
ring = Abacus.Ring.Z() (\mathbb{Z}) /* ring of integers */
---
o=Abacus.Matrix(ring, 3)
o.toString()
|0 0 0|
|0 0 0|
|0 0 0|
o.toTex()
\begin{bmatrix}0 & 0 & 0 \\ 0 & 0 & 0 \\ 0 & 0 & 0\end{bmatrix}
o.dispose()
---
o=Abacus.Matrix.I(ring, 3)
o.toString()
|1 0 0|
|0 1 0|
|0 0 1|
o.toTex()
\begin{bmatrix}1 & 0 & 0 \\ 0 & 1 & 0 \\ 0 & 0 & 1\end{bmatrix}
o.slice(0, 0, 1, 1)
|1 0|
|0 1|
o.add(1)
|2 1 1|
|1 2 1|
|1 1 2|
o.mul(2)
|2 0 0|
|0 2 0|
|0 0 2|
o.add(Abacus.Matrix.I(ring, 3))
|2 0 0|
|0 2 0|
|0 0 2|
o.mul(Abacus.Matrix.I(ring, 3))
|1 0 0|
|0 1 0|
|0 0 1|
o.dispose()
---
o=Abacus.Matrix(ring, [[1,2],[3,4]]).prod(Abacus.Matrix(ring, [[1,1],[2,2]]))
|1 1 2 2|
|2 2 4 4|
|3 3 4 4|
|6 6 8 8|
o.toTex()
\begin{bmatrix}1 & 1 & 2 & 2 \\ 2 & 2 & 4 & 4 \\ 3 & 3 & 4 & 4 \\ 6 & 6 & 8 & 8\end{bmatrix}
---
o=Abacus.Matrix(ring, [91, 21]).concat(Abacus.Matrix.I(ring, 2))
o.toString()
|91 1 0|
|21 0 1|
o.ref(false, [2, 1])
|7  1 -4|
|0 -3 13|
o.ref(false, [2, 1]).slice(0, 1)
| 1 -4|
|-3 13|
o.ref(false, [2, 1]).slice(0, 1).mul(Abacus.Matrix(ring, [91, 21]))
|7|
|0|
o.ref(false, [2, 1]).slice(0, 1).t().mul(Abacus.Matrix(ring, [7, 0]))
|  7|
|-28|
---
o=Abacus.Matrix(ring, [[5, 6], [6, -11], [8, 7]]).concat(Abacus.Matrix.I(ring, 3))
o.toString()
|5   6 1 0 0|
|6 -11 0 1 0|
|8   7 0 0 1|
o.ref(false, [3, 2])
|1 -17 -1  1  0|
|0  13 -2 -1  2|
|0   0 10  1 -7|
o.ref(false, [3, 2]).slice(0, 2)
|-1  1  0|
|-2 -1  2|
|10  1 -7|
o.ref(false, [3, 2]).slice(0, 2).mul(Abacus.Matrix(ring, [[5, 6], [6, -11], [8, 7]]))
|1 -17|
|0  13|
|0   0|
o.ref(false, [3, 2]).slice(0, 2).t().mul(Abacus.Matrix(ring, [[1, -17], [0, 13], [0, 0]]))
|-1  -9|
| 1 -30|
| 0  26|
---
o=Abacus.Matrix.I(ring, 3)
o.toString()
|1 0 0|
|0 1 0|
|0 0 1|
o.evd()
U:
|1.0000 0.0000 0.0000|
|0.0000 1.0000 0.0000|
|0.0000 0.0000 1.0000|
E:
|1.0000|
|1.0000|
|1.0000|
o.svd()
U:
|1.0000 0.0000 0.0000|
|0.0000 1.0000 0.0000|
|0.0000 0.0000 1.0000|
S:
|1.0000|
|1.0000|
|1.0000|
V:
|1.0000 0.0000 0.0000|
|0.0000 1.0000 0.0000|
|0.0000 0.0000 1.0000|
---
o=Abacus.Matrix(ring, [[3, 2, 2], [2, 3, -2]])
o.toString()
|3 2  2|
|2 3 -2|
o.svd()
U:
|                                                                                                                                                                                                                                                                                                 1623894961/43184619649                                                                                                                                                                                                                                                                                                  1479120664/43184619649|
|4058256549112988264791272639237663939435308833894630271850297856077028394122800503395756760610613919942100539851303745359665633418782644524499550217254128/118485538514791501678345323271665912699155300371161103564104944397811803388107206590421307313751567500882893982961555798733351868252960218950443045494483473 4455482360792913075860932747823209692191405407264113789892422116993258239206370346536563224466480837299863833238202221434167518172711264124072533338386497/118485538514791501678345323271665912699155300371161103564104944397811803388107206590421307313751567500882893982961555798733351868252960218950443045494483473|
S:
||
|906756925380163053720452673995764094826116550384069861423327257525520150999623188274702237364977989316933062555512837389498007131817375293224651445204234823562983463081829345081408661622512693234376968033656897148289619537006431771814528766318415180280906283766452047999650333440861203420817189712448567867537/14038822837140140333383587355500327431695525362464414771084123121573369653729781973735539797930644209026651924689150478948110307568665877136004626881169488316276889976458906379686710023293771111598156261527015514499628144988737688344808672171260576449921437406297379010085870112434024983783008805104475070141729|
V:
|1702639998901123/606532671339121 142695156468570735538743995780707097278522007568319739078210787801477605042168773517316526039206757282415525956384429607191903598549210275903246144349773139954320148457308053392052397243182762016387473706282039830345927649450127365186/51790014826909257035976186456860668239302156862327750640971410295918050600196706689074217942931132171954768269987368505346765187736557429645205625586911480209703374749649667813862549945255436846187145923268089119806303369284005917753|
|1671158411177002/606532671339121 145383334094224483953070556866665548621049698486649212754092556505810582944543310736213273123383123661534402597472965146043490930652075865370802870860434863224223337324955524697548281230992005409681352377272234831505496680417580212939/51790014826909257035976186456860668239302156862327750640971410295918050600196706689074217942931132171954768269987368505346765187736557429645205625586911480209703374749649667813862549945255436846187145923268089119806303369284005917753|
|  62963175448242/606532671339121  -5376355251307496828653122171916902685055381836658947351763537408665955804749074437793494168352732758237753282177071077703174664205731178935113453021323446539806377735294942610991767975618486786587757341980390002319138061934905695506/51790014826909257035976186456860668239302156862327750640971410295918050600196706689074217942931132171954768269987368505346765187736557429645205625586911480209703374749649667813862549945255436846187145923268089119806303369284005917753|
---
o=Abacus.Matrix(ring, [91, 21])
o.toString()
|91|
|21|
o.snf()
Left:
|13 4|
| 3 1|
Diagonal:
|7|
|0|
Right:
|1|
Reconstructed:
|91|
|21|
o.lu()
P:
|1 0|
|0 1|
L:
|91 0|
|21 1|
D:
|91  0|
| 0 91|
U:
|91|
| 0|
o.qr()
Q:
|91|
|21|
D:
|1|
R:
|1|
---
o=Abacus.Matrix(ring, [[5, 6], [6, -11], [8, 7]])
o.toString()
|5   6|
|6 -11|
|8   7|
o.snf()
Left:
| 96  -7 2|
| 97  -7 2|
|151 -11 3|
Diagonal:
|1  0|
|0 13|
|0  0|
Right:
|1 -17|
|1 -18|
Reconstructed:
|5   6|
|6 -11|
|8   7|
o.lu()
P:
|1 0 0|
|0 1 0|
|0 0 1|
L:
|5   0 0|
|6 -91 0|
|8 -13 1|
D:
|5    0   0|
|0 -455   0|
|0    0 -91|
U:
|5   6|
|0 -91|
|0   0|
o.qr()
Q:
|5   650|
|6 -1495|
|8   715|
D:
|125   0|
|  0 125|
R:
|125 20|
|  0  1|
---
o=Abacus.Matrix(ring, [[0, -2, 1], [1, 3, 1], [0, 0, 1], [1, 1, 5]])
o.toString()
|0 -2 1|
|1  3 1|
|0  0 1|
|1  1 5|
o.lu()
P:
|0 1 0 0|
|1 0 0 0|
|0 0 1 0|
|0 0 0 1|
L:
|1  0  0 0|
|0 -2  0 0|
|0  0 -2 0|
|1 -2 -6 1|
D:
|1  0 0  0|
|0 -2 0  0|
|0  0 4  0|
|0  0 0 -2|
U:
|1  3  1|
|0 -2  1|
|0  0 -2|
|0  0  0|
o.qr()
Q:
|0 -4 -12|
|1  2 -12|
|0  0  12|
|1 -2  12|
D:
|2  0  0|
|0 24  0|
|0  0 12|
R:
|2  4   6|
|0 12 -12|
|0  0   1|
---
o=Abacus.Matrix.I(ring, 3)
o.toString()
|1 0 0|
|0 1 0|
|0 0 1|
o.inv().toString()
|1 0 0|
|0 1 0|
|0 0 1| true
o.adj().toString()
|1 0 0|
|0 1 0|
|0 0 1| true
o.charpoly().toString()
x^3-3*x^2+3*x-1

o=Abacus.Matrix(ring, [[4,7],[2,6]])
o.toString()
|4 7|
|2 6|
o.inv().toString()
| 3/5 -7/10|
|-1/5   2/5| true
o.adj().toString()
| 6 -7|
|-2  4| true
o.charpoly().toString()
x^2-10*x+10

o=Abacus.Matrix(ring, [[-3,2,-5],[-1,0,-2],[3,-4,1]])
o.toString()
|-3  2 -5|
|-1  0 -2|
| 3 -4  1|
o.adj().toString()
|-8 18 -4|
|-5 12 -1|
| 4 -6  2| true
o.charpoly().toString()
x^3+2*x^2+6*x+6
---
o=Abacus.Matrix(ring, 3, 3)
o.toString()
|0 0 0|
|0 0 0|
|0 0 0|
o.rowspace()
o.colspace()
o.nullspace()
Vector 0(true): 
|1|
|0|
|0|
Vector 1(true): 
|0|
|1|
|0|
Vector 2(true): 
|0|
|0|
|1|
<0,1> = 0
<0,2> = 0
<1,2> = 0
o.nullspace(true)
Vector 0(true): 
|1 0 0|
Vector 1(true): 
|0 1 0|
Vector 2(true): 
|0 0 1|
<0,1> = 0
<0,2> = 0
<1,2> = 0
---
o=Abacus.Matrix.I(ring, 3)
o.toString()
|1 0 0|
|0 1 0|
|0 0 1|
o.rowspace()
Vector 0:
|1 0 0|
Vector 1:
|0 1 0|
Vector 2:
|0 0 1|
<0,1> = 0
<0,2> = 0
<1,2> = 0
o.colspace()
Vector 0:
|1|
|0|
|0|
Vector 1:
|0|
|1|
|0|
Vector 2:
|0|
|0|
|1|
<0,1> = 0
<0,2> = 0
<1,2> = 0
o.nullspace()
o.nullspace(true)
---
o=Abacus.Matrix(ring, [[ 1,  3, 0],[-2, -6, 0],[ 3,  9, 6]])
o.toString()
| 1  3 0|
|-2 -6 0|
| 3  9 6|
o.rowspace()
Vector 0:
|1 3 0|
Vector 1:
|3 9 6|
<0,1> = 30
o.colspace()
Vector 0:
| 1|
|-2|
| 3|
Vector 1:
|0|
|0|
|6|
<0,1> = 18
o.nullspace()
Vector 0(true): 
|-3|
| 1|
| 0|
o.nullspace(true)
Vector 0(true): 
|2 1 0|
---
o=Abacus.Matrix(ring, [[5, 10, 7], [3, 6, 1], [7, 14, 0]])
o.toString()
|5 10 7|
|3  6 1|
|7 14 0|
o.rowspace()
Vector 0:
|7 14 0|
Vector 1:
|3 6 1|
<0,1> = 105
o.colspace()
Vector 0:
|5|
|3|
|7|
Vector 1:
|7|
|1|
|0|
<0,1> = 38
o.nullspace()
Vector 0(true): 
|-2|
| 1|
| 0|
o.nullspace(true)
Vector 0(true): 
|7 -49 16|
---
o=Abacus.Matrix(ring, [[5, 3, 7], [10, 6, 14], [8, 3, 1]])
o.toString()
| 5 3  7|
|10 6 14|
| 8 3  1|
o.rowspace()
Vector 0:
|8 3 1|
Vector 1:
|5 3 7|
<0,1> = 56
o.colspace()
Vector 0:
| 5|
|10|
| 8|
Vector 1:
|3|
|6|
|3|
<0,1> = 99
o.nullspace()
Vector 0(true): 
|  6|
|-17|
|  3|
o.nullspace(true)
Vector 0(true): 
|-2 1 0|
---
o=Abacus.Matrix(ring, [[1, 1, 1], [2, 2, 2], [3, 3, 3]])
o.toString()
|1 1 1|
|2 2 2|
|3 3 3|
o.rowspace()
Vector 0:
|1 1 1|
o.colspace()
Vector 0:
|1|
|2|
|3|
o.nullspace()
Vector 0(true): 
|-1|
| 1|
| 0|
Vector 1(true): 
|-1|
| 0|
| 1|
<0,1> = 1
o.nullspace(true)
Vector 0(true): 
|-2 1 0|
Vector 1(true): 
|-3 0 1|
<0,1> = 6
---
ring = Abacus.Ring.Q("x") (\mathbb{Q}[x]) /* ring of polynomials */
---
o=Abacus.Matrix.I(ring, 3)
o.toString()
|1 0 0|
|0 1 0|
|0 0 1|
o.inv().toString()
|1 0 0|
|0 1 0|
|0 0 1| true
o.charpoly("y").toString()
y^3-3*y^2+3*y-1

o=Abacus.Matrix(ring, [[ring.fromString("x-1"),ring.fromString("x^2-1")],[ring.fromString("x^2-1"),ring.fromString("x-1")]])
o.toString()
|  x-1 x^2-1|
|x^2-1   x-1|
o.rref().toString()
|-1            0|
| 0 -x^3-x^2+2*x|
o.inv().toString()
|   -1/(x^3+x^2-2*x) (x+1)/(x^3+x^2-2*x)|
|(x+1)/(x^3+x^2-2*x)    -1/(x^3+x^2-2*x)| true
o.charpoly("y").toString()
y^2+(-2*x+2)*y+(-x^4+3*x^2-2*x)
---
