Abacus.Combinations (VERSION = 2.0.0)
---
o = Abacus.Combination(6,3,{type:"variation"})
o.total()
Integer { value: 120n }
o.next()
0,1,2
o.hasNext()
true
o.next()
0,1,3
default order is "lex", lexicographic-order
o.rewind()
[ '0,1,2', 0, Integer { value: 0n }, '0,1,2' ]
[ '0,1,3', 1, Integer { value: 1n }, '0,1,3' ]
[ '0,1,4', 2, Integer { value: 2n }, '0,1,4' ]
[ '0,1,5', 3, Integer { value: 3n }, '0,1,5' ]
[ '0,2,1', 4, Integer { value: 4n }, '0,2,1' ]
[ '0,2,3', 5, Integer { value: 5n }, '0,2,3' ]
[ '0,2,4', 6, Integer { value: 6n }, '0,2,4' ]
[ '0,2,5', 7, Integer { value: 7n }, '0,2,5' ]
[ '0,3,1', 8, Integer { value: 8n }, '0,3,1' ]
[ '0,3,2', 9, Integer { value: 9n }, '0,3,2' ]
[ '0,3,4', 10, Integer { value: 10n }, '0,3,4' ]
[ '0,3,5', 11, Integer { value: 11n }, '0,3,5' ]
[ '0,4,1', 12, Integer { value: 12n }, '0,4,1' ]
[ '0,4,2', 13, Integer { value: 13n }, '0,4,2' ]
[ '0,4,3', 14, Integer { value: 14n }, '0,4,3' ]
[ '0,4,5', 15, Integer { value: 15n }, '0,4,5' ]
[ '0,5,1', 16, Integer { value: 16n }, '0,5,1' ]
[ '0,5,2', 17, Integer { value: 17n }, '0,5,2' ]
[ '0,5,3', 18, Integer { value: 18n }, '0,5,3' ]
[ '0,5,4', 19, Integer { value: 19n }, '0,5,4' ]
[ '1,0,2', 20, Integer { value: 20n }, '1,0,2' ]
[ '1,0,3', 21, Integer { value: 21n }, '1,0,3' ]
[ '1,0,4', 22, Integer { value: 22n }, '1,0,4' ]
[ '1,0,5', 23, Integer { value: 23n }, '1,0,5' ]
[ '1,2,0', 24, Integer { value: 24n }, '1,2,0' ]
[ '1,2,3', 25, Integer { value: 25n }, '1,2,3' ]
[ '1,2,4', 26, Integer { value: 26n }, '1,2,4' ]
[ '1,2,5', 27, Integer { value: 27n }, '1,2,5' ]
[ '1,3,0', 28, Integer { value: 28n }, '1,3,0' ]
[ '1,3,2', 29, Integer { value: 29n }, '1,3,2' ]
[ '1,3,4', 30, Integer { value: 30n }, '1,3,4' ]
[ '1,3,5', 31, Integer { value: 31n }, '1,3,5' ]
[ '1,4,0', 32, Integer { value: 32n }, '1,4,0' ]
[ '1,4,2', 33, Integer { value: 33n }, '1,4,2' ]
[ '1,4,3', 34, Integer { value: 34n }, '1,4,3' ]
[ '1,4,5', 35, Integer { value: 35n }, '1,4,5' ]
[ '1,5,0', 36, Integer { value: 36n }, '1,5,0' ]
[ '1,5,2', 37, Integer { value: 37n }, '1,5,2' ]
[ '1,5,3', 38, Integer { value: 38n }, '1,5,3' ]
[ '1,5,4', 39, Integer { value: 39n }, '1,5,4' ]
[ '2,0,1', 40, Integer { value: 40n }, '2,0,1' ]
[ '2,0,3', 41, Integer { value: 41n }, '2,0,3' ]
[ '2,0,4', 42, Integer { value: 42n }, '2,0,4' ]
[ '2,0,5', 43, Integer { value: 43n }, '2,0,5' ]
[ '2,1,0', 44, Integer { value: 44n }, '2,1,0' ]
[ '2,1,3', 45, Integer { value: 45n }, '2,1,3' ]
[ '2,1,4', 46, Integer { value: 46n }, '2,1,4' ]
[ '2,1,5', 47, Integer { value: 47n }, '2,1,5' ]
[ '2,3,0', 48, Integer { value: 48n }, '2,3,0' ]
[ '2,3,1', 49, Integer { value: 49n }, '2,3,1' ]
[ '2,3,4', 50, Integer { value: 50n }, '2,3,4' ]
[ '2,3,5', 51, Integer { value: 51n }, '2,3,5' ]
[ '2,4,0', 52, Integer { value: 52n }, '2,4,0' ]
[ '2,4,1', 53, Integer { value: 53n }, '2,4,1' ]
[ '2,4,3', 54, Integer { value: 54n }, '2,4,3' ]
[ '2,4,5', 55, Integer { value: 55n }, '2,4,5' ]
[ '2,5,0', 56, Integer { value: 56n }, '2,5,0' ]
[ '2,5,1', 57, Integer { value: 57n }, '2,5,1' ]
[ '2,5,3', 58, Integer { value: 58n }, '2,5,3' ]
[ '2,5,4', 59, Integer { value: 59n }, '2,5,4' ]
[ '3,0,1', 60, Integer { value: 60n }, '3,0,1' ]
[ '3,0,2', 61, Integer { value: 61n }, '3,0,2' ]
[ '3,0,4', 62, Integer { value: 62n }, '3,0,4' ]
[ '3,0,5', 63, Integer { value: 63n }, '3,0,5' ]
[ '3,1,0', 64, Integer { value: 64n }, '3,1,0' ]
[ '3,1,2', 65, Integer { value: 65n }, '3,1,2' ]
[ '3,1,4', 66, Integer { value: 66n }, '3,1,4' ]
[ '3,1,5', 67, Integer { value: 67n }, '3,1,5' ]
[ '3,2,0', 68, Integer { value: 68n }, '3,2,0' ]
[ '3,2,1', 69, Integer { value: 69n }, '3,2,1' ]
[ '3,2,4', 70, Integer { value: 70n }, '3,2,4' ]
[ '3,2,5', 71, Integer { value: 71n }, '3,2,5' ]
[ '3,4,0', 72, Integer { value: 72n }, '3,4,0' ]
[ '3,4,1', 73, Integer { value: 73n }, '3,4,1' ]
[ '3,4,2', 74, Integer { value: 74n }, '3,4,2' ]
[ '3,4,5', 75, Integer { value: 75n }, '3,4,5' ]
[ '3,5,0', 76, Integer { value: 76n }, '3,5,0' ]
[ '3,5,1', 77, Integer { value: 77n }, '3,5,1' ]
[ '3,5,2', 78, Integer { value: 78n }, '3,5,2' ]
[ '3,5,4', 79, Integer { value: 79n }, '3,5,4' ]
[ '4,0,1', 80, Integer { value: 80n }, '4,0,1' ]
[ '4,0,2', 81, Integer { value: 81n }, '4,0,2' ]
[ '4,0,3', 82, Integer { value: 82n }, '4,0,3' ]
[ '4,0,5', 83, Integer { value: 83n }, '4,0,5' ]
[ '4,1,0', 84, Integer { value: 84n }, '4,1,0' ]
[ '4,1,2', 85, Integer { value: 85n }, '4,1,2' ]
[ '4,1,3', 86, Integer { value: 86n }, '4,1,3' ]
[ '4,1,5', 87, Integer { value: 87n }, '4,1,5' ]
[ '4,2,0', 88, Integer { value: 88n }, '4,2,0' ]
[ '4,2,1', 89, Integer { value: 89n }, '4,2,1' ]
[ '4,2,3', 90, Integer { value: 90n }, '4,2,3' ]
[ '4,2,5', 91, Integer { value: 91n }, '4,2,5' ]
[ '4,3,0', 92, Integer { value: 92n }, '4,3,0' ]
[ '4,3,1', 93, Integer { value: 93n }, '4,3,1' ]
[ '4,3,2', 94, Integer { value: 94n }, '4,3,2' ]
[ '4,3,5', 95, Integer { value: 95n }, '4,3,5' ]
[ '4,5,0', 96, Integer { value: 96n }, '4,5,0' ]
[ '4,5,1', 97, Integer { value: 97n }, '4,5,1' ]
[ '4,5,2', 98, Integer { value: 98n }, '4,5,2' ]
[ '4,5,3', 99, Integer { value: 99n }, '4,5,3' ]
[ '5,0,1', 100, Integer { value: 100n }, '5,0,1' ]
[ '5,0,2', 101, Integer { value: 101n }, '5,0,2' ]
[ '5,0,3', 102, Integer { value: 102n }, '5,0,3' ]
[ '5,0,4', 103, Integer { value: 103n }, '5,0,4' ]
[ '5,1,0', 104, Integer { value: 104n }, '5,1,0' ]
[ '5,1,2', 105, Integer { value: 105n }, '5,1,2' ]
[ '5,1,3', 106, Integer { value: 106n }, '5,1,3' ]
[ '5,1,4', 107, Integer { value: 107n }, '5,1,4' ]
[ '5,2,0', 108, Integer { value: 108n }, '5,2,0' ]
[ '5,2,1', 109, Integer { value: 109n }, '5,2,1' ]
[ '5,2,3', 110, Integer { value: 110n }, '5,2,3' ]
[ '5,2,4', 111, Integer { value: 111n }, '5,2,4' ]
[ '5,3,0', 112, Integer { value: 112n }, '5,3,0' ]
[ '5,3,1', 113, Integer { value: 113n }, '5,3,1' ]
[ '5,3,2', 114, Integer { value: 114n }, '5,3,2' ]
[ '5,3,4', 115, Integer { value: 115n }, '5,3,4' ]
[ '5,4,0', 116, Integer { value: 116n }, '5,4,0' ]
[ '5,4,1', 117, Integer { value: 117n }, '5,4,1' ]
[ '5,4,2', 118, Integer { value: 118n }, '5,4,2' ]
[ '5,4,3', 119, Integer { value: 119n }, '5,4,3' ]
backwards
o.rewind(-1)
5,4,3
5,4,2
5,4,1
5,4,0
5,3,4
5,3,2
5,3,1
5,3,0
5,2,4
5,2,3
5,2,1
5,2,0
5,1,4
5,1,3
5,1,2
5,1,0
5,0,4
5,0,3
5,0,2
5,0,1
4,5,3
4,5,2
4,5,1
4,5,0
4,3,5
4,3,2
4,3,1
4,3,0
4,2,5
4,2,3
4,2,1
4,2,0
4,1,5
4,1,3
4,1,2
4,1,0
4,0,5
4,0,3
4,0,2
4,0,1
3,5,4
3,5,2
3,5,1
3,5,0
3,4,5
3,4,2
3,4,1
3,4,0
3,2,5
3,2,4
3,2,1
3,2,0
3,1,5
3,1,4
3,1,2
3,1,0
3,0,5
3,0,4
3,0,2
3,0,1
2,5,4
2,5,3
2,5,1
2,5,0
2,4,5
2,4,3
2,4,1
2,4,0
2,3,5
2,3,4
2,3,1
2,3,0
2,1,5
2,1,4
2,1,3
2,1,0
2,0,5
2,0,4
2,0,3
2,0,1
1,5,4
1,5,3
1,5,2
1,5,0
1,4,5
1,4,3
1,4,2
1,4,0
1,3,5
1,3,4
1,3,2
1,3,0
1,2,5
1,2,4
1,2,3
1,2,0
1,0,5
1,0,4
1,0,3
1,0,2
0,5,4
0,5,3
0,5,2
0,5,1
0,4,5
0,4,3
0,4,2
0,4,1
0,3,5
0,3,4
0,3,2
0,3,1
0,2,5
0,2,4
0,2,3
0,2,1
0,1,5
0,1,4
0,1,3
0,1,2
o.order("lex,reflected")
2,1,0
3,1,0
4,1,0
5,1,0
1,2,0
3,2,0
4,2,0
5,2,0
1,3,0
2,3,0
4,3,0
5,3,0
1,4,0
2,4,0
3,4,0
5,4,0
1,5,0
2,5,0
3,5,0
4,5,0
2,0,1
3,0,1
4,0,1
5,0,1
0,2,1
3,2,1
4,2,1
5,2,1
0,3,1
2,3,1
4,3,1
5,3,1
0,4,1
2,4,1
3,4,1
5,4,1
0,5,1
2,5,1
3,5,1
4,5,1
1,0,2
3,0,2
4,0,2
5,0,2
0,1,2
3,1,2
4,1,2
5,1,2
0,3,2
1,3,2
4,3,2
5,3,2
0,4,2
1,4,2
3,4,2
5,4,2
0,5,2
1,5,2
3,5,2
4,5,2
1,0,3
2,0,3
4,0,3
5,0,3
0,1,3
2,1,3
4,1,3
5,1,3
0,2,3
1,2,3
4,2,3
5,2,3
0,4,3
1,4,3
2,4,3
5,4,3
0,5,3
1,5,3
2,5,3
4,5,3
1,0,4
2,0,4
3,0,4
5,0,4
0,1,4
2,1,4
3,1,4
5,1,4
0,2,4
1,2,4
3,2,4
5,2,4
0,3,4
1,3,4
2,3,4
5,3,4
0,5,4
1,5,4
2,5,4
3,5,4
1,0,5
2,0,5
3,0,5
4,0,5
0,1,5
2,1,5
3,1,5
4,1,5
0,2,5
1,2,5
3,2,5
4,2,5
0,3,5
1,3,5
2,3,5
4,3,5
0,4,5
1,4,5
2,4,5
3,4,5
o.order("lex,reversed")
5,4,3
5,4,2
5,4,1
5,4,0
5,3,4
5,3,2
5,3,1
5,3,0
5,2,4
5,2,3
5,2,1
5,2,0
5,1,4
5,1,3
5,1,2
5,1,0
5,0,4
5,0,3
5,0,2
5,0,1
4,5,3
4,5,2
4,5,1
4,5,0
4,3,5
4,3,2
4,3,1
4,3,0
4,2,5
4,2,3
4,2,1
4,2,0
4,1,5
4,1,3
4,1,2
4,1,0
4,0,5
4,0,3
4,0,2
4,0,1
3,5,4
3,5,2
3,5,1
3,5,0
3,4,5
3,4,2
3,4,1
3,4,0
3,2,5
3,2,4
3,2,1
3,2,0
3,1,5
3,1,4
3,1,2
3,1,0
3,0,5
3,0,4
3,0,2
3,0,1
2,5,4
2,5,3
2,5,1
2,5,0
2,4,5
2,4,3
2,4,1
2,4,0
2,3,5
2,3,4
2,3,1
2,3,0
2,1,5
2,1,4
2,1,3
2,1,0
2,0,5
2,0,4
2,0,3
2,0,1
1,5,4
1,5,3
1,5,2
1,5,0
1,4,5
1,4,3
1,4,2
1,4,0
1,3,5
1,3,4
1,3,2
1,3,0
1,2,5
1,2,4
1,2,3
1,2,0
1,0,5
1,0,4
1,0,3
1,0,2
0,5,4
0,5,3
0,5,2
0,5,1
0,4,5
0,4,3
0,4,2
0,4,1
0,3,5
0,3,4
0,3,2
0,3,1
0,2,5
0,2,4
0,2,3
0,2,1
0,1,5
0,1,4
0,1,3
0,1,2
o.order("colex")
2,1,0
3,1,0
4,1,0
5,1,0
1,2,0
3,2,0
4,2,0
5,2,0
1,3,0
2,3,0
4,3,0
5,3,0
1,4,0
2,4,0
3,4,0
5,4,0
1,5,0
2,5,0
3,5,0
4,5,0
2,0,1
3,0,1
4,0,1
5,0,1
0,2,1
3,2,1
4,2,1
5,2,1
0,3,1
2,3,1
4,3,1
5,3,1
0,4,1
2,4,1
3,4,1
5,4,1
0,5,1
2,5,1
3,5,1
4,5,1
1,0,2
3,0,2
4,0,2
5,0,2
0,1,2
3,1,2
4,1,2
5,1,2
0,3,2
1,3,2
4,3,2
5,3,2
0,4,2
1,4,2
3,4,2
5,4,2
0,5,2
1,5,2
3,5,2
4,5,2
1,0,3
2,0,3
4,0,3
5,0,3
0,1,3
2,1,3
4,1,3
5,1,3
0,2,3
1,2,3
4,2,3
5,2,3
0,4,3
1,4,3
2,4,3
5,4,3
0,5,3
1,5,3
2,5,3
4,5,3
1,0,4
2,0,4
3,0,4
5,0,4
0,1,4
2,1,4
3,1,4
5,1,4
0,2,4
1,2,4
3,2,4
5,2,4
0,3,4
1,3,4
2,3,4
5,3,4
0,5,4
1,5,4
2,5,4
3,5,4
1,0,5
2,0,5
3,0,5
4,0,5
0,1,5
2,1,5
3,1,5
4,1,5
0,2,5
1,2,5
3,2,5
4,2,5
0,3,5
1,3,5
2,3,5
4,3,5
0,4,5
1,4,5
2,4,5
3,4,5
o.order("colex,reflected")
0,1,2
0,1,3
0,1,4
0,1,5
0,2,1
0,2,3
0,2,4
0,2,5
0,3,1
0,3,2
0,3,4
0,3,5
0,4,1
0,4,2
0,4,3
0,4,5
0,5,1
0,5,2
0,5,3
0,5,4
1,0,2
1,0,3
1,0,4
1,0,5
1,2,0
1,2,3
1,2,4
1,2,5
1,3,0
1,3,2
1,3,4
1,3,5
1,4,0
1,4,2
1,4,3
1,4,5
1,5,0
1,5,2
1,5,3
1,5,4
2,0,1
2,0,3
2,0,4
2,0,5
2,1,0
2,1,3
2,1,4
2,1,5
2,3,0
2,3,1
2,3,4
2,3,5
2,4,0
2,4,1
2,4,3
2,4,5
2,5,0
2,5,1
2,5,3
2,5,4
3,0,1
3,0,2
3,0,4
3,0,5
3,1,0
3,1,2
3,1,4
3,1,5
3,2,0
3,2,1
3,2,4
3,2,5
3,4,0
3,4,1
3,4,2
3,4,5
3,5,0
3,5,1
3,5,2
3,5,4
4,0,1
4,0,2
4,0,3
4,0,5
4,1,0
4,1,2
4,1,3
4,1,5
4,2,0
4,2,1
4,2,3
4,2,5
4,3,0
4,3,1
4,3,2
4,3,5
4,5,0
4,5,1
4,5,2
4,5,3
5,0,1
5,0,2
5,0,3
5,0,4
5,1,0
5,1,2
5,1,3
5,1,4
5,2,0
5,2,1
5,2,3
5,2,4
5,3,0
5,3,1
5,3,2
5,3,4
5,4,0
5,4,1
5,4,2
5,4,3
o.order("colex,reversed")
3,4,5
2,4,5
1,4,5
0,4,5
4,3,5
2,3,5
1,3,5
0,3,5
4,2,5
3,2,5
1,2,5
0,2,5
4,1,5
3,1,5
2,1,5
0,1,5
4,0,5
3,0,5
2,0,5
1,0,5
3,5,4
2,5,4
1,5,4
0,5,4
5,3,4
2,3,4
1,3,4
0,3,4
5,2,4
3,2,4
1,2,4
0,2,4
5,1,4
3,1,4
2,1,4
0,1,4
5,0,4
3,0,4
2,0,4
1,0,4
4,5,3
2,5,3
1,5,3
0,5,3
5,4,3
2,4,3
1,4,3
0,4,3
5,2,3
4,2,3
1,2,3
0,2,3
5,1,3
4,1,3
2,1,3
0,1,3
5,0,3
4,0,3
2,0,3
1,0,3
4,5,2
3,5,2
1,5,2
0,5,2
5,4,2
3,4,2
1,4,2
0,4,2
5,3,2
4,3,2
1,3,2
0,3,2
5,1,2
4,1,2
3,1,2
0,1,2
5,0,2
4,0,2
3,0,2
1,0,2
4,5,1
3,5,1
2,5,1
0,5,1
5,4,1
3,4,1
2,4,1
0,4,1
5,3,1
4,3,1
2,3,1
0,3,1
5,2,1
4,2,1
3,2,1
0,2,1
5,0,1
4,0,1
3,0,1
2,0,1
4,5,0
3,5,0
2,5,0
1,5,0
5,4,0
3,4,0
2,4,0
1,4,0
5,3,0
4,3,0
2,3,0
1,3,0
5,2,0
4,2,0
3,2,0
1,2,0
5,1,0
4,1,0
3,1,0
2,1,0
o.order("random")
1,3,2
2,5,0
5,2,4
4,2,0
5,3,0
4,1,2
4,5,3
0,2,4
3,5,2
1,0,3
0,4,2
3,0,2
5,2,0
5,2,3
4,0,3
1,2,3
4,3,1
1,2,4
0,1,2
3,5,4
3,0,4
5,3,4
5,1,0
5,1,4
0,5,1
3,5,1
4,1,0
3,1,2
2,5,4
0,5,4
4,3,2
2,5,3
1,2,0
1,4,3
2,3,0
0,1,3
1,4,5
3,0,5
3,1,5
5,3,2
4,5,2
0,4,1
2,3,1
4,2,5
3,4,5
2,5,1
5,0,1
1,0,2
2,0,1
1,0,4
5,4,0
0,1,5
4,3,0
4,1,5
2,4,5
3,0,1
3,1,0
0,2,1
5,0,2
3,2,0
2,0,3
5,3,1
4,5,1
0,5,2
4,3,5
0,2,3
0,2,5
5,2,1
2,3,5
5,4,1
0,3,1
5,4,3
4,2,3
0,1,4
4,5,0
0,5,3
2,4,1
4,0,1
0,4,5
3,2,4
1,5,2
3,1,4
4,1,3
1,5,3
1,3,5
5,4,2
0,3,5
1,0,5
3,5,0
1,4,2
0,4,3
0,3,4
3,4,1
1,5,4
5,1,3
5,1,2
4,2,1
0,3,2
4,0,5
2,4,0
4,0,2
1,2,5
3,4,2
3,2,1
1,3,0
1,5,0
3,4,0
5,0,3
3,2,5
1,3,4
5,0,4
1,4,0
2,0,4
2,4,3
2,3,4
2,0,5
2,1,0
2,1,3
2,1,4
2,1,5
o.random()
4,2,3
o.order("colex").range(-5, -1)
4,3,5
0,4,5
1,4,5
2,4,5
3,4,5
o.dispose()
