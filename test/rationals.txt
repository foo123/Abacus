Abacus.Rationals (VERSION = 1.0.0)
---
o=Abacus.Rational()
o.toString()
0
o.toTex()
0
o.toDec()
0

o=Abacus.Rational.rnd01()
o.toString()
213/2048
o.toDec()
0.10400390625

o=Abacus.Rational.rnd("0.5","1")
o.toString()
7/8
o.toDec()
0.875
o.rad(2).toString()
403201/431040

Abacus.Rational(1).rad(2)
1
Abacus.Rational(4).rad(2)
2
Abacus.Rational(9).rad(2)
3
Abacus.Rational(27).rad(3)
3
Abacus.Rational(1,3).pow(2).rad(2)
1/3

o=Abacus.Rational.fromString("5/9")
o.toString()
5/9
o.toTex()
\frac{5}{9}
o.toDec()
0.[5]
o.toDec(2)
0.56
o.toDec(7)
0.5555556
o.rad(2).toString()
51841/69552
o.sub(o.rad(2).pow(2)).toString()
-1/4837480704
Abacus.Rational.fromString(o.toDec()).toString()
5/9
Abacus.Rational.fromString(o.toTex()).toString()
5/9
Abacus.Rational(5, 9).toString()
5/9
Abacus.Rational("5", 9).toString()
5/9
o.inv().toString()
9/5
o.inv().toTex()
\frac{9}{5}
o.inv().toDec()
1.8
o.neg().toString()
-5/9
o.neg().toTex()
-\frac{5}{9}
o.neg().toDec()
-0.[5]

o=Abacus.Rational.fromString("0.[5]")
o.toString()
5/9
o.toTex()
\frac{5}{9}
o.toDec()
0.[5]
o.toDec(2)
0.56
o.toDec(7)
0.5555556

o=Abacus.Rational.fromString("3.125e7")
o.toString()
31250000
o.toTex()
31250000
o.toDec()
31250000

o=Abacus.Rational.fromIntRem(3, 1, 3)
o.toString()
10/3
o.toTex()
\frac{10}{3}
o.toDec()
3.[3]
[o.integer(), o.remainder()]
[ '3', '1' ]

o=Abacus.Rational.fromDec("0.[5]").add(Abacus.Rational.fromDec("0.[3]"))
o.toString()
8/9
o.toTex()
\frac{8}{9}
o.toDec()
0.[8]
o.toDec(2)
0.89
o.toDec(7)
0.8888889

o=Abacus.Rational.fromDec("0.[5]").mul(Abacus.Rational.fromDec("0.[3]"))
o.toString()
5/27
o.toTex()
\frac{5}{27}
o.toDec()
0.[185]
o.toDec(2)
0.19
o.toDec(7)
0.1851852

o=Abacus.Rational.fromString("0.[5]").equ(Abacus.Rational.fromString("5/9"))
true
Decimals to Fractions (with optional repeating decimals)
o=Abacus.Rational.fromDec(-3)
-3
o=Abacus.Rational.fromDec("-3.0")
-3
o=Abacus.Rational.fromDec("-3.[0]")
-3
o=Abacus.Rational.fromDec(0.9)
9/10
o=Abacus.Rational.fromDec("0.[9]")
1
o=Abacus.Rational.fromDec(0.5)
1/2
o=Abacus.Rational.fromDec("0.[5]")
5/9
o=Abacus.Rational.fromDec("0.55[5]")
5/9
o=Abacus.Rational.fromDec("0.555[55]")
5/9
o=Abacus.Rational.fromDec("0.[3]")
1/3
o=Abacus.Rational.fromDec("0.1[6]")
1/6
o=Abacus.Rational.fromDec("0.1[7]")
8/45
o=Abacus.Rational.fromDec("3.[3]")
10/3
o=Abacus.Rational.fromDec("1.0[42]")
172/165
o=Abacus.Rational.fromDec("1.04242[42]")
172/165
---
Fractions to Decimals (with optional repeating decimals)
o=Abacus.Rational.fromString("-3/1").toDec()
-3
o=Abacus.Rational.fromString("-3/-1").toDec()
3
o=Abacus.Rational.fromString("1/6").toDec()
0.1[6]
o=Abacus.Rational.fromString("5/9").toDec()
0.[5]
o=Abacus.Rational.fromString("9/10").toDec()
0.9
o=Abacus.Rational.fromString("172/165").toDec()
1.0[42]
o=Abacus.Rational.fromString("0.12566").toDec(4)
0.1257
o=Abacus.Rational.fromString("0.99999").toDec(4)
1.0000
o=Abacus.Rational.fromString("-9.99999").toDec(4)
-10.0000
o=Abacus.Rational.fromString("-9.99999").toDec(0)
-10
o=Abacus.Rational.fromString("0.9[5]").toDec(4)
0.9556
o=Abacus.Rational.fromString("0.999[5]").toDec(4)
0.9996
o=Abacus.Rational.fromString("1.11").round()
1
o=Abacus.Rational.fromString("-1.11").round()
-1
o=Abacus.Rational.fromString("1.75").round()
2
o=Abacus.Rational.fromString("-1.75").round()
-2
---
Continued Fractions
Abacus.Rational.fromString("3.14").toContFrac()
[ Integer { value: 3n },
  Integer { value: 7n },
  Integer { value: 7n } ]
Abacus.Rational.fromString("3.1415926535897932384626433").toContFrac()
[ Integer { value: 3n },
  Integer { value: 7n },
  Integer { value: 15n },
  Integer { value: 1n },
  Integer { value: 292n },
  Integer { value: 1n },
  Integer { value: 1n },
  Integer { value: 1n },
  Integer { value: 2n },
  Integer { value: 1n },
  Integer { value: 3n },
  Integer { value: 1n },
  Integer { value: 14n },
  Integer { value: 2n },
  Integer { value: 1n },
  Integer { value: 1n },
  Integer { value: 2n },
  Integer { value: 2n },
  Integer { value: 2n },
  Integer { value: 2n },
  Integer { value: 1n },
  Integer { value: 84n },
  Integer { value: 2n },
  Integer { value: 2n },
  Integer { value: 1n },
  Integer { value: 4n },
  Integer { value: 2n },
  Integer { value: 2n },
  Integer { value: 6n },
  Integer { value: 1n },
  Integer { value: 1n },
  Integer { value: 3n },
  Integer { value: 24n },
  Integer { value: 2n },
  Integer { value: 1n },
  Integer { value: 14n },
  Integer { value: 1n },
  Integer { value: 8n },
  Integer { value: 6n },
  Integer { value: 1n },
  Integer { value: 1n },
  Integer { value: 23n },
  Integer { value: 1n },
  Integer { value: 2n },
  Integer { value: 4n },
  Integer { value: 1n },
  Integer { value: 37n } ]
Abacus.Rational.fromContFrac(Abacus.Rational.fromString("3.14").toContFrac()).toDec()==="3.14"
true
Abacus.Rational.fromContFrac(Abacus.Rational.fromString("3.1415926535897932384626433").toContFrac()).toDec()==="3.1415926535897932384626433"
true
---
Approximations
Abacus.Rational.fromString("3.14").approximate(100).toString()
157/50
Abacus.Rational.fromString("3.1415926535897932384626433").approximate(100).toString()
22/7
Abacus.Rational.fromString("3.1415926535897932384626433").approximate(200).toString()
355/113
---
(X)GCD, LCM of Rationals
Abacus.Rational.xgcd(Abacus.Rational.One(), Abacus.Rational(3))
(1)(1) + (3)(0) = 1 1 true
Abacus.Rational.xgcd(Abacus.Rational(6), Abacus.Rational(4))
(6)(1) + (4)(-1) = 2 2 true
Abacus.Rational.xgcd(Abacus.Rational(12), Abacus.Rational(6), Abacus.Rational(3))
(12)(0) + (6)(0) + (3)(1) = 3 3 true
Abacus.Rational.xgcd(Abacus.Rational(3,7), Abacus.Rational(12,22))
(3/7)(-5) + (6/11)(4) = 3/77 3/77 true
3/77
Abacus.Rational.xgcd(Abacus.Rational(13,6), Abacus.Rational(3,4))
(13/6)(-1) + (3/4)(3) = 1/12 1/12 true
1/12
Abacus.Rational.xgcd(Abacus.Rational(1,3), Abacus.Rational(3,4), Abacus.Rational(3))
(1/3)(-2) + (3/4)(1) + (3)(0) = 1/12 1/12 true
1/12
