Abacus.Compositions (VERSION = 1.0.0)
---
o = Abacus.Partition(7,{type:"composition","max=":4})
o.total()
34
o.next()
[ 1, 1, 1, 4 ]
o.hasNext()
false
o.next()
null
default order is "lex", lexicographic-order
o.rewind()
[ 1, 1, 1, 4 ]
backwards
o.rewind(-1)
[ 4, 3 ]
o.order("lex,reflected")
[ 4, 1, 1, 1 ]
o.order("lex,reversed")
[ 4, 3 ]
o.order("colex")
[ 4, 3 ]
o.order("colex,reflected")
[ 3, 4 ]
o.order("colex,reversed")
[ 1, 1, 1, 4 ]
o.random()
[ 1, 4, 1, 1 ]
o.dispose()
o = Abacus.Partition(8,{type:"composition","max=":4})
o.total()
79
o.next()
[ 1, 1, 1, 1, 4 ]
o.hasNext()
false
o.next()
null
default order is "lex", lexicographic-order
o.rewind()
[ 1, 1, 1, 1, 4 ]
backwards
o.rewind(-1)
[ 4, 4 ]
o.order("lex,reflected")
[ 4, 1, 1, 1, 1 ]
o.order("lex,reversed")
[ 4, 4 ]
o.random()
[ 1, 4, 1, 2 ]
o.dispose()
o = Abacus.Partition(8,{type:"composition","max=":3})
o.total()
73
o.next()
[ 1, 1, 1, 1, 1, 3 ]
o.hasNext()
false
o.next()
null
default order is "lex", lexicographic-order
o.rewind()
[ 1, 1, 1, 1, 1, 3 ]
backwards
o.rewind(-1)
[ 3, 3, 2 ]
o.order("lex,reflected")
[ 3, 1, 1, 1, 1, 1 ]
o.order("lex,reversed")
[ 3, 3, 2 ]
o.random()
[ 1, 3, 1, 1, 1, 1 ]
o.dispose()
o = Abacus.Partition(13,{type:"composition","max=":4})
o.total()
2793
o.next()
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 4 ]
o.hasNext()
false
o.next()
null
default order is "lex", lexicographic-order
o.rewind()
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 4 ]
backwards
o.rewind(-1)
[ 4, 4, 4, 1 ]
o.order("lex,reflected")
[ 4, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
o.order("lex,reversed")
[ 4, 4, 4, 1 ]
o.random()
[ 4, 1, 1, 3, 1, 3 ]
o.dispose()
o = Abacus.Partition(7,{type:"composition","parts=":4})
o.total()
20
o.next()
[ 1, 1, 1, 4 ]
o.hasNext()
true
o.next()
[ 1, 1, 2, 3 ]
default order is "lex", lexicographic-order
o.rewind()
[ 1, 1, 1, 4 ]
[ 1, 1, 2, 3 ]
[ 1, 1, 3, 2 ]
[ 1, 1, 4, 1 ]
[ 1, 2, 1, 3 ]
[ 1, 2, 2, 2 ]
[ 1, 2, 3, 1 ]
[ 1, 3, 1, 2 ]
[ 1, 3, 2, 1 ]
[ 1, 4, 1, 1 ]
[ 2, 1, 1, 3 ]
[ 2, 1, 2, 2 ]
[ 2, 1, 3, 1 ]
[ 2, 2, 1, 2 ]
[ 2, 2, 2, 1 ]
[ 2, 3, 1, 1 ]
[ 3, 1, 1, 2 ]
[ 3, 1, 2, 1 ]
[ 3, 2, 1, 1 ]
[ 4, 1, 1, 1 ]
backwards
o.rewind(-1)
[ 4, 1, 1, 1 ]
[ 3, 2, 1, 1 ]
[ 3, 1, 2, 1 ]
[ 3, 1, 1, 2 ]
[ 2, 3, 1, 1 ]
[ 2, 2, 2, 1 ]
[ 2, 2, 1, 2 ]
[ 2, 1, 3, 1 ]
[ 2, 1, 2, 2 ]
[ 2, 1, 1, 3 ]
[ 1, 4, 1, 1 ]
[ 1, 3, 2, 1 ]
[ 1, 3, 1, 2 ]
[ 1, 2, 3, 1 ]
[ 1, 2, 2, 2 ]
[ 1, 2, 1, 3 ]
[ 1, 1, 4, 1 ]
[ 1, 1, 3, 2 ]
[ 1, 1, 2, 3 ]
[ 1, 1, 1, 4 ]
o.order("lex,reflected")
[ 4, 1, 1, 1 ]
[ 3, 2, 1, 1 ]
[ 2, 3, 1, 1 ]
[ 1, 4, 1, 1 ]
[ 3, 1, 2, 1 ]
[ 2, 2, 2, 1 ]
[ 1, 3, 2, 1 ]
[ 2, 1, 3, 1 ]
[ 1, 2, 3, 1 ]
[ 1, 1, 4, 1 ]
[ 3, 1, 1, 2 ]
[ 2, 2, 1, 2 ]
[ 1, 3, 1, 2 ]
[ 2, 1, 2, 2 ]
[ 1, 2, 2, 2 ]
[ 1, 1, 3, 2 ]
[ 2, 1, 1, 3 ]
[ 1, 2, 1, 3 ]
[ 1, 1, 2, 3 ]
[ 1, 1, 1, 4 ]
o.order("lex,reversed")
[ 4, 1, 1, 1 ]
[ 3, 2, 1, 1 ]
[ 3, 1, 2, 1 ]
[ 3, 1, 1, 2 ]
[ 2, 3, 1, 1 ]
[ 2, 2, 2, 1 ]
[ 2, 2, 1, 2 ]
[ 2, 1, 3, 1 ]
[ 2, 1, 2, 2 ]
[ 2, 1, 1, 3 ]
[ 1, 4, 1, 1 ]
[ 1, 3, 2, 1 ]
[ 1, 3, 1, 2 ]
[ 1, 2, 3, 1 ]
[ 1, 2, 2, 2 ]
[ 1, 2, 1, 3 ]
[ 1, 1, 4, 1 ]
[ 1, 1, 3, 2 ]
[ 1, 1, 2, 3 ]
[ 1, 1, 1, 4 ]
o.order("colex")
[ 4, 1, 1, 1 ]
[ 3, 2, 1, 1 ]
[ 2, 3, 1, 1 ]
[ 1, 4, 1, 1 ]
[ 3, 1, 2, 1 ]
[ 2, 2, 2, 1 ]
[ 1, 3, 2, 1 ]
[ 2, 1, 3, 1 ]
[ 1, 2, 3, 1 ]
[ 1, 1, 4, 1 ]
[ 3, 1, 1, 2 ]
[ 2, 2, 1, 2 ]
[ 1, 3, 1, 2 ]
[ 2, 1, 2, 2 ]
[ 1, 2, 2, 2 ]
[ 1, 1, 3, 2 ]
[ 2, 1, 1, 3 ]
[ 1, 2, 1, 3 ]
[ 1, 1, 2, 3 ]
[ 1, 1, 1, 4 ]
o.order("colex,reflected")
[ 1, 1, 1, 4 ]
[ 1, 1, 2, 3 ]
[ 1, 1, 3, 2 ]
[ 1, 1, 4, 1 ]
[ 1, 2, 1, 3 ]
[ 1, 2, 2, 2 ]
[ 1, 2, 3, 1 ]
[ 1, 3, 1, 2 ]
[ 1, 3, 2, 1 ]
[ 1, 4, 1, 1 ]
[ 2, 1, 1, 3 ]
[ 2, 1, 2, 2 ]
[ 2, 1, 3, 1 ]
[ 2, 2, 1, 2 ]
[ 2, 2, 2, 1 ]
[ 2, 3, 1, 1 ]
[ 3, 1, 1, 2 ]
[ 3, 1, 2, 1 ]
[ 3, 2, 1, 1 ]
[ 4, 1, 1, 1 ]
o.order("colex,reversed")
[ 1, 1, 1, 4 ]
[ 1, 1, 2, 3 ]
[ 1, 2, 1, 3 ]
[ 2, 1, 1, 3 ]
[ 1, 1, 3, 2 ]
[ 1, 2, 2, 2 ]
[ 2, 1, 2, 2 ]
[ 1, 3, 1, 2 ]
[ 2, 2, 1, 2 ]
[ 3, 1, 1, 2 ]
[ 1, 1, 4, 1 ]
[ 1, 2, 3, 1 ]
[ 2, 1, 3, 1 ]
[ 1, 3, 2, 1 ]
[ 2, 2, 2, 1 ]
[ 3, 1, 2, 1 ]
[ 1, 4, 1, 1 ]
[ 2, 3, 1, 1 ]
[ 3, 2, 1, 1 ]
[ 4, 1, 1, 1 ]
o.random()
[ 2, 1, 3, 1 ]
o.dispose()
o = Abacus.Partition(8,{type:"composition","parts=":4})
o.total()
35
o.next()
[ 1, 1, 1, 5 ]
o.hasNext()
true
o.next()
[ 1, 1, 2, 4 ]
default order is "lex", lexicographic-order
o.rewind()
[ 1, 1, 1, 5 ]
[ 1, 1, 2, 4 ]
[ 1, 1, 3, 3 ]
[ 1, 1, 4, 2 ]
[ 1, 1, 5, 1 ]
[ 1, 2, 1, 4 ]
[ 1, 2, 2, 3 ]
[ 1, 2, 3, 2 ]
[ 1, 2, 4, 1 ]
[ 1, 3, 1, 3 ]
[ 1, 3, 2, 2 ]
[ 1, 3, 3, 1 ]
[ 1, 4, 1, 2 ]
[ 1, 4, 2, 1 ]
[ 1, 5, 1, 1 ]
[ 2, 1, 1, 4 ]
[ 2, 1, 2, 3 ]
[ 2, 1, 3, 2 ]
[ 2, 1, 4, 1 ]
[ 2, 2, 1, 3 ]
[ 2, 2, 2, 2 ]
[ 2, 2, 3, 1 ]
[ 2, 3, 1, 2 ]
[ 2, 3, 2, 1 ]
[ 2, 4, 1, 1 ]
[ 3, 1, 1, 3 ]
[ 3, 1, 2, 2 ]
[ 3, 1, 3, 1 ]
[ 3, 2, 1, 2 ]
[ 3, 2, 2, 1 ]
[ 3, 3, 1, 1 ]
[ 4, 1, 1, 2 ]
[ 4, 1, 2, 1 ]
[ 4, 2, 1, 1 ]
[ 5, 1, 1, 1 ]
backwards
o.rewind(-1)
[ 5, 1, 1, 1 ]
[ 4, 2, 1, 1 ]
[ 4, 1, 2, 1 ]
[ 4, 1, 1, 2 ]
[ 3, 3, 1, 1 ]
[ 3, 2, 2, 1 ]
[ 3, 2, 1, 2 ]
[ 3, 1, 3, 1 ]
[ 3, 1, 2, 2 ]
[ 3, 1, 1, 3 ]
[ 2, 4, 1, 1 ]
[ 2, 3, 2, 1 ]
[ 2, 3, 1, 2 ]
[ 2, 2, 3, 1 ]
[ 2, 2, 2, 2 ]
[ 2, 2, 1, 3 ]
[ 2, 1, 4, 1 ]
[ 2, 1, 3, 2 ]
[ 2, 1, 2, 3 ]
[ 2, 1, 1, 4 ]
[ 1, 5, 1, 1 ]
[ 1, 4, 2, 1 ]
[ 1, 4, 1, 2 ]
[ 1, 3, 3, 1 ]
[ 1, 3, 2, 2 ]
[ 1, 3, 1, 3 ]
[ 1, 2, 4, 1 ]
[ 1, 2, 3, 2 ]
[ 1, 2, 2, 3 ]
[ 1, 2, 1, 4 ]
[ 1, 1, 5, 1 ]
[ 1, 1, 4, 2 ]
[ 1, 1, 3, 3 ]
[ 1, 1, 2, 4 ]
[ 1, 1, 1, 5 ]
o.order("lex,reflected")
[ 5, 1, 1, 1 ]
[ 4, 2, 1, 1 ]
[ 3, 3, 1, 1 ]
[ 2, 4, 1, 1 ]
[ 1, 5, 1, 1 ]
[ 4, 1, 2, 1 ]
[ 3, 2, 2, 1 ]
[ 2, 3, 2, 1 ]
[ 1, 4, 2, 1 ]
[ 3, 1, 3, 1 ]
[ 2, 2, 3, 1 ]
[ 1, 3, 3, 1 ]
[ 2, 1, 4, 1 ]
[ 1, 2, 4, 1 ]
[ 1, 1, 5, 1 ]
[ 4, 1, 1, 2 ]
[ 3, 2, 1, 2 ]
[ 2, 3, 1, 2 ]
[ 1, 4, 1, 2 ]
[ 3, 1, 2, 2 ]
[ 2, 2, 2, 2 ]
[ 1, 3, 2, 2 ]
[ 2, 1, 3, 2 ]
[ 1, 2, 3, 2 ]
[ 1, 1, 4, 2 ]
[ 3, 1, 1, 3 ]
[ 2, 2, 1, 3 ]
[ 1, 3, 1, 3 ]
[ 2, 1, 2, 3 ]
[ 1, 2, 2, 3 ]
[ 1, 1, 3, 3 ]
[ 2, 1, 1, 4 ]
[ 1, 2, 1, 4 ]
[ 1, 1, 2, 4 ]
[ 1, 1, 1, 5 ]
o.order("lex,reversed")
[ 5, 1, 1, 1 ]
[ 4, 2, 1, 1 ]
[ 4, 1, 2, 1 ]
[ 4, 1, 1, 2 ]
[ 3, 3, 1, 1 ]
[ 3, 2, 2, 1 ]
[ 3, 2, 1, 2 ]
[ 3, 1, 3, 1 ]
[ 3, 1, 2, 2 ]
[ 3, 1, 1, 3 ]
[ 2, 4, 1, 1 ]
[ 2, 3, 2, 1 ]
[ 2, 3, 1, 2 ]
[ 2, 2, 3, 1 ]
[ 2, 2, 2, 2 ]
[ 2, 2, 1, 3 ]
[ 2, 1, 4, 1 ]
[ 2, 1, 3, 2 ]
[ 2, 1, 2, 3 ]
[ 2, 1, 1, 4 ]
[ 1, 5, 1, 1 ]
[ 1, 4, 2, 1 ]
[ 1, 4, 1, 2 ]
[ 1, 3, 3, 1 ]
[ 1, 3, 2, 2 ]
[ 1, 3, 1, 3 ]
[ 1, 2, 4, 1 ]
[ 1, 2, 3, 2 ]
[ 1, 2, 2, 3 ]
[ 1, 2, 1, 4 ]
[ 1, 1, 5, 1 ]
[ 1, 1, 4, 2 ]
[ 1, 1, 3, 3 ]
[ 1, 1, 2, 4 ]
[ 1, 1, 1, 5 ]
o.random()
[ 3, 2, 2, 1 ]
o.dispose()
