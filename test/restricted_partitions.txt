Abacus.Partitions (VERSION = 1.0.6)
---
o = Abacus.Partition(7,{"min=":3,"parts=":2})
o.total()
1
default order is "lex", lexicographic-order
o.rewind()
[ '4+3', 0, 0, '4+3' ]
backwards
o.rewind(-1)
4+3
o.random()
4+3
o.dispose()
o = Abacus.Partition(7,{"min=":3,"max=":4,"parts=":2})
o.total()
1
default order is "lex", lexicographic-order
o.rewind()
[ '4+3', 0, 0, '4+3' ]
backwards
o.rewind(-1)
4+3
o.random()
4+3
o.dispose()
o = Abacus.Partition(7,{"parts=":3,"min=":1})
o.total()
3
default order is "lex", lexicographic-order
o.rewind()
[ '3+3+1', 0, 0, '3+3+1' ]
[ '4+2+1', 1, 1, '4+2+1' ]
[ '5+1+1', 2, 2, '5+1+1' ]
backwards
o.rewind(-1)
5+1+1
4+2+1
3+3+1
o.random()
5+1+1
o.dispose()
o = Abacus.Partition(14,{"min=":2,"parts=":4})
o.total()
7
default order is "lex", lexicographic-order
o.rewind()
[ '4+4+4+2', 0, 0, '4+4+4+2' ]
[ '5+4+3+2', 1, 1, '5+4+3+2' ]
[ '5+5+2+2', 2, 2, '5+5+2+2' ]
[ '6+3+3+2', 3, 3, '6+3+3+2' ]
[ '6+4+2+2', 4, 4, '6+4+2+2' ]
[ '7+3+2+2', 5, 5, '7+3+2+2' ]
[ '8+2+2+2', 6, 6, '8+2+2+2' ]
backwards
o.rewind(-1)
8+2+2+2
7+3+2+2
6+4+2+2
6+3+3+2
5+5+2+2
5+4+3+2
4+4+4+2
o.random()
7+3+2+2
o.dispose()
o = Abacus.Partition(14,{"min=":2,"max=":5,"parts=":4})
o.total()
2
default order is "lex", lexicographic-order
o.rewind()
[ '5+4+3+2', 0, 0, '5+4+3+2' ]
[ '5+5+2+2', 1, 1, '5+5+2+2' ]
backwards
o.rewind(-1)
5+5+2+2
5+4+3+2
o.random()
5+4+3+2
o.dispose()
o = Abacus.Partition(28,{"min=":4,"max=":10,"parts=":4})
o.total()
4
default order is "lex", lexicographic-order
o.rewind()
[ '10+7+7+4', 0, 0, '10+7+7+4' ]
[ '10+8+6+4', 1, 1, '10+8+6+4' ]
[ '10+9+5+4', 2, 2, '10+9+5+4' ]
[ '10+10+4+4', 3, 3, '10+10+4+4' ]
backwards
o.rewind(-1)
10+10+4+4
10+9+5+4
10+8+6+4
10+7+7+4
o.random()
10+8+6+4
o.dispose()
o = Abacus.Partition(14,{"min=":3,"parts=":4})
o.total()
2
default order is "lex", lexicographic-order
o.rewind()
[ '4+4+3+3', 0, 0, '4+4+3+3' ]
[ '5+3+3+3', 1, 1, '5+3+3+3' ]
backwards
o.rewind(-1)
5+3+3+3
4+4+3+3
o.random()
4+4+3+3
o.dispose()
o = Abacus.Partition(14,{"min=":3,"max=":4,"parts=":4})
o.total()
1
default order is "lex", lexicographic-order
o.rewind()
[ '4+4+3+3', 0, 0, '4+4+3+3' ]
backwards
o.rewind(-1)
4+4+3+3
o.random()
4+4+3+3
o.dispose()
o = Abacus.Partition(7,{"max=":4})
o.total()
3
default order is "lex", lexicographic-order
o.rewind()
[ '4+1+1+1', 0, 0, '4+1+1+1' ]
[ '4+2+1', 1, 1, '4+2+1' ]
[ '4+3', 2, 2, '4+3' ]
backwards
o.rewind(-1)
4+3
4+2+1
4+1+1+1
o.order("lex,reflected")
1+1+1+4
1+2+4
3+4
o.order("lex,reversed")
4+3
4+2+1
4+1+1+1
o.order("colex")
4+3
o.order("colex,reflected")
3+4
o.order("colex,reversed")
4+1+1+1
o.random()
4+3
o.dispose()
o = Abacus.Partition(8,{"max=":4})
o.total()
5
default order is "lex", lexicographic-order
o.rewind()
[ '4+1+1+1+1', 0, 0, '4+1+1+1+1' ]
[ '4+2+1+1', 1, 1, '4+2+1+1' ]
[ '4+2+2', 2, 2, '4+2+2' ]
[ '4+3+1', 3, 3, '4+3+1' ]
[ '4+4', 4, 4, '4+4' ]
backwards
o.rewind(-1)
4+4
4+3+1
4+2+2
4+2+1+1
4+1+1+1+1
o.order("lex,reflected")
1+1+1+1+4
1+1+2+4
2+2+4
1+3+4
4+4
o.order("lex,reversed")
4+4
4+3+1
4+2+2
4+2+1+1
4+1+1+1+1
o.random()
4+4
o.dispose()
o = Abacus.Partition(11,{"max=":5})
o.total()
10
default order is "lex", lexicographic-order
o.rewind()
[ '5+1+1+1+1+1+1', 0, 0, '5+1+1+1+1+1+1' ]
[ '5+2+1+1+1+1', 1, 1, '5+2+1+1+1+1' ]
[ '5+2+2+1+1', 2, 2, '5+2+2+1+1' ]
[ '5+2+2+2', 3, 3, '5+2+2+2' ]
[ '5+3+1+1+1', 4, 4, '5+3+1+1+1' ]
[ '5+3+2+1', 5, 5, '5+3+2+1' ]
[ '5+3+3', 6, 6, '5+3+3' ]
[ '5+4+1+1', 7, 7, '5+4+1+1' ]
[ '5+4+2', 8, 8, '5+4+2' ]
[ '5+5+1', 9, 9, '5+5+1' ]
backwards
o.rewind(-1)
5+5+1
5+4+2
5+4+1+1
5+3+3
5+3+2+1
5+3+1+1+1
5+2+2+2
5+2+2+1+1
5+2+1+1+1+1
5+1+1+1+1+1+1
o.order("lex,reflected")
1+1+1+1+1+1+5
1+1+1+1+2+5
1+1+2+2+5
2+2+2+5
1+1+1+3+5
1+2+3+5
3+3+5
1+1+4+5
2+4+5
1+5+5
o.order("lex,reversed")
5+5+1
5+4+2
5+4+1+1
5+3+3
5+3+2+1
5+3+1+1+1
5+2+2+2
5+2+2+1+1
5+2+1+1+1+1
5+1+1+1+1+1+1
o.random()
5+5+1
o.dispose()
o = Abacus.Partition(12,{"max=":4})
o.total()
15
default order is "lex", lexicographic-order
o.rewind()
[ '4+1+1+1+1+1+1+1+1', 0, 0, '4+1+1+1+1+1+1+1+1' ]
[ '4+2+1+1+1+1+1+1', 1, 1, '4+2+1+1+1+1+1+1' ]
[ '4+2+2+1+1+1+1', 2, 2, '4+2+2+1+1+1+1' ]
[ '4+2+2+2+1+1', 3, 3, '4+2+2+2+1+1' ]
[ '4+2+2+2+2', 4, 4, '4+2+2+2+2' ]
[ '4+3+1+1+1+1+1', 5, 5, '4+3+1+1+1+1+1' ]
[ '4+3+2+1+1+1', 6, 6, '4+3+2+1+1+1' ]
[ '4+3+2+2+1', 7, 7, '4+3+2+2+1' ]
[ '4+3+3+1+1', 8, 8, '4+3+3+1+1' ]
[ '4+3+3+2', 9, 9, '4+3+3+2' ]
[ '4+4+1+1+1+1', 10, 10, '4+4+1+1+1+1' ]
[ '4+4+2+1+1', 11, 11, '4+4+2+1+1' ]
[ '4+4+2+2', 12, 12, '4+4+2+2' ]
[ '4+4+3+1', 13, 13, '4+4+3+1' ]
[ '4+4+4', 14, 14, '4+4+4' ]
backwards
o.rewind(-1)
4+4+4
4+4+3+1
4+4+2+2
4+4+2+1+1
4+4+1+1+1+1
4+3+3+2
4+3+3+1+1
4+3+2+2+1
4+3+2+1+1+1
4+3+1+1+1+1+1
4+2+2+2+2
4+2+2+2+1+1
4+2+2+1+1+1+1
4+2+1+1+1+1+1+1
4+1+1+1+1+1+1+1+1
o.order("lex,reflected")
1+1+1+1+1+1+1+1+4
1+1+1+1+1+1+2+4
1+1+1+1+2+2+4
1+1+2+2+2+4
2+2+2+2+4
1+1+1+1+1+3+4
1+1+1+2+3+4
1+2+2+3+4
1+1+3+3+4
2+3+3+4
1+1+1+1+4+4
1+1+2+4+4
2+2+4+4
1+3+4+4
4+4+4
o.order("lex,reversed")
4+4+4
4+4+3+1
4+4+2+2
4+4+2+1+1
4+4+1+1+1+1
4+3+3+2
4+3+3+1+1
4+3+2+2+1
4+3+2+1+1+1
4+3+1+1+1+1+1
4+2+2+2+2
4+2+2+2+1+1
4+2+2+1+1+1+1
4+2+1+1+1+1+1+1
4+1+1+1+1+1+1+1+1
o.random()
4+2+1+1+1+1+1+1
o.dispose()
o = Abacus.Partition(17,{"max=":4})
o.total()
39
default order is "lex", lexicographic-order
o.rewind()
[ '4+1+1+1+1+1+1+1+1+1+1+1+1+1', 0, 0, '4+1+1+1+1+1+1+1+1+1+1+1+1+1' ]
[ '4+2+1+1+1+1+1+1+1+1+1+1+1', 1, 1, '4+2+1+1+1+1+1+1+1+1+1+1+1' ]
[ '4+2+2+1+1+1+1+1+1+1+1+1', 2, 2, '4+2+2+1+1+1+1+1+1+1+1+1' ]
[ '4+2+2+2+1+1+1+1+1+1+1', 3, 3, '4+2+2+2+1+1+1+1+1+1+1' ]
[ '4+2+2+2+2+1+1+1+1+1', 4, 4, '4+2+2+2+2+1+1+1+1+1' ]
[ '4+2+2+2+2+2+1+1+1', 5, 5, '4+2+2+2+2+2+1+1+1' ]
[ '4+2+2+2+2+2+2+1', 6, 6, '4+2+2+2+2+2+2+1' ]
[ '4+3+1+1+1+1+1+1+1+1+1+1', 7, 7, '4+3+1+1+1+1+1+1+1+1+1+1' ]
[ '4+3+2+1+1+1+1+1+1+1+1', 8, 8, '4+3+2+1+1+1+1+1+1+1+1' ]
[ '4+3+2+2+1+1+1+1+1+1', 9, 9, '4+3+2+2+1+1+1+1+1+1' ]
[ '4+3+2+2+2+1+1+1+1', 10, 10, '4+3+2+2+2+1+1+1+1' ]
[ '4+3+2+2+2+2+1+1', 11, 11, '4+3+2+2+2+2+1+1' ]
[ '4+3+2+2+2+2+2', 12, 12, '4+3+2+2+2+2+2' ]
[ '4+3+3+1+1+1+1+1+1+1', 13, 13, '4+3+3+1+1+1+1+1+1+1' ]
[ '4+3+3+2+1+1+1+1+1', 14, 14, '4+3+3+2+1+1+1+1+1' ]
[ '4+3+3+2+2+1+1+1', 15, 15, '4+3+3+2+2+1+1+1' ]
[ '4+3+3+2+2+2+1', 16, 16, '4+3+3+2+2+2+1' ]
[ '4+3+3+3+1+1+1+1', 17, 17, '4+3+3+3+1+1+1+1' ]
[ '4+3+3+3+2+1+1', 18, 18, '4+3+3+3+2+1+1' ]
[ '4+3+3+3+2+2', 19, 19, '4+3+3+3+2+2' ]
[ '4+3+3+3+3+1', 20, 20, '4+3+3+3+3+1' ]
[ '4+4+1+1+1+1+1+1+1+1+1', 21, 21, '4+4+1+1+1+1+1+1+1+1+1' ]
[ '4+4+2+1+1+1+1+1+1+1', 22, 22, '4+4+2+1+1+1+1+1+1+1' ]
[ '4+4+2+2+1+1+1+1+1', 23, 23, '4+4+2+2+1+1+1+1+1' ]
[ '4+4+2+2+2+1+1+1', 24, 24, '4+4+2+2+2+1+1+1' ]
[ '4+4+2+2+2+2+1', 25, 25, '4+4+2+2+2+2+1' ]
[ '4+4+3+1+1+1+1+1+1', 26, 26, '4+4+3+1+1+1+1+1+1' ]
[ '4+4+3+2+1+1+1+1', 27, 27, '4+4+3+2+1+1+1+1' ]
[ '4+4+3+2+2+1+1', 28, 28, '4+4+3+2+2+1+1' ]
[ '4+4+3+2+2+2', 29, 29, '4+4+3+2+2+2' ]
[ '4+4+3+3+1+1+1', 30, 30, '4+4+3+3+1+1+1' ]
[ '4+4+3+3+2+1', 31, 31, '4+4+3+3+2+1' ]
[ '4+4+3+3+3', 32, 32, '4+4+3+3+3' ]
[ '4+4+4+1+1+1+1+1', 33, 33, '4+4+4+1+1+1+1+1' ]
[ '4+4+4+2+1+1+1', 34, 34, '4+4+4+2+1+1+1' ]
[ '4+4+4+2+2+1', 35, 35, '4+4+4+2+2+1' ]
[ '4+4+4+3+1+1', 36, 36, '4+4+4+3+1+1' ]
[ '4+4+4+3+2', 37, 37, '4+4+4+3+2' ]
[ '4+4+4+4+1', 38, 38, '4+4+4+4+1' ]
backwards
o.rewind(-1)
4+4+4+4+1
4+4+4+3+2
4+4+4+3+1+1
4+4+4+2+2+1
4+4+4+2+1+1+1
4+4+4+1+1+1+1+1
4+4+3+3+3
4+4+3+3+2+1
4+4+3+3+1+1+1
4+4+3+2+2+2
4+4+3+2+2+1+1
4+4+3+2+1+1+1+1
4+4+3+1+1+1+1+1+1
4+4+2+2+2+2+1
4+4+2+2+2+1+1+1
4+4+2+2+1+1+1+1+1
4+4+2+1+1+1+1+1+1+1
4+4+1+1+1+1+1+1+1+1+1
4+3+3+3+3+1
4+3+3+3+2+2
4+3+3+3+2+1+1
4+3+3+3+1+1+1+1
4+3+3+2+2+2+1
4+3+3+2+2+1+1+1
4+3+3+2+1+1+1+1+1
4+3+3+1+1+1+1+1+1+1
4+3+2+2+2+2+2
4+3+2+2+2+2+1+1
4+3+2+2+2+1+1+1+1
4+3+2+2+1+1+1+1+1+1
4+3+2+1+1+1+1+1+1+1+1
4+3+1+1+1+1+1+1+1+1+1+1
4+2+2+2+2+2+2+1
4+2+2+2+2+2+1+1+1
4+2+2+2+2+1+1+1+1+1
4+2+2+2+1+1+1+1+1+1+1
4+2+2+1+1+1+1+1+1+1+1+1
4+2+1+1+1+1+1+1+1+1+1+1+1
4+1+1+1+1+1+1+1+1+1+1+1+1+1
o.order("lex,reflected")
1+1+1+1+1+1+1+1+1+1+1+1+1+4
1+1+1+1+1+1+1+1+1+1+1+2+4
1+1+1+1+1+1+1+1+1+2+2+4
1+1+1+1+1+1+1+2+2+2+4
1+1+1+1+1+2+2+2+2+4
1+1+1+2+2+2+2+2+4
1+2+2+2+2+2+2+4
1+1+1+1+1+1+1+1+1+1+3+4
1+1+1+1+1+1+1+1+2+3+4
1+1+1+1+1+1+2+2+3+4
1+1+1+1+2+2+2+3+4
1+1+2+2+2+2+3+4
2+2+2+2+2+3+4
1+1+1+1+1+1+1+3+3+4
1+1+1+1+1+2+3+3+4
1+1+1+2+2+3+3+4
1+2+2+2+3+3+4
1+1+1+1+3+3+3+4
1+1+2+3+3+3+4
2+2+3+3+3+4
1+3+3+3+3+4
1+1+1+1+1+1+1+1+1+4+4
1+1+1+1+1+1+1+2+4+4
1+1+1+1+1+2+2+4+4
1+1+1+2+2+2+4+4
1+2+2+2+2+4+4
1+1+1+1+1+1+3+4+4
1+1+1+1+2+3+4+4
1+1+2+2+3+4+4
2+2+2+3+4+4
1+1+1+3+3+4+4
1+2+3+3+4+4
3+3+3+4+4
1+1+1+1+1+4+4+4
1+1+1+2+4+4+4
1+2+2+4+4+4
1+1+3+4+4+4
2+3+4+4+4
1+4+4+4+4
o.order("lex,reversed")
4+4+4+4+1
4+4+4+3+2
4+4+4+3+1+1
4+4+4+2+2+1
4+4+4+2+1+1+1
4+4+4+1+1+1+1+1
4+4+3+3+3
4+4+3+3+2+1
4+4+3+3+1+1+1
4+4+3+2+2+2
4+4+3+2+2+1+1
4+4+3+2+1+1+1+1
4+4+3+1+1+1+1+1+1
4+4+2+2+2+2+1
4+4+2+2+2+1+1+1
4+4+2+2+1+1+1+1+1
4+4+2+1+1+1+1+1+1+1
4+4+1+1+1+1+1+1+1+1+1
4+3+3+3+3+1
4+3+3+3+2+2
4+3+3+3+2+1+1
4+3+3+3+1+1+1+1
4+3+3+2+2+2+1
4+3+3+2+2+1+1+1
4+3+3+2+1+1+1+1+1
4+3+3+1+1+1+1+1+1+1
4+3+2+2+2+2+2
4+3+2+2+2+2+1+1
4+3+2+2+2+1+1+1+1
4+3+2+2+1+1+1+1+1+1
4+3+2+1+1+1+1+1+1+1+1
4+3+1+1+1+1+1+1+1+1+1+1
4+2+2+2+2+2+2+1
4+2+2+2+2+2+1+1+1
4+2+2+2+2+1+1+1+1+1
4+2+2+2+1+1+1+1+1+1+1
4+2+2+1+1+1+1+1+1+1+1+1
4+2+1+1+1+1+1+1+1+1+1+1+1
4+1+1+1+1+1+1+1+1+1+1+1+1+1
o.random()
4+4+3+2+2+1+1
o.dispose()
o = Abacus.Partition(7,{"parts=":4})
o.total()
3
default order is "lex", lexicographic-order
o.rewind()
[ '2+2+2+1', 0, 0, '2+2+2+1' ]
[ '3+2+1+1', 1, 1, '3+2+1+1' ]
[ '4+1+1+1', 2, 2, '4+1+1+1' ]
o.rewind(-1)
4+1+1+1
3+2+1+1
2+2+2+1
o.order("lex,reflected")
1+2+2+2
1+1+2+3
1+1+1+4
o.order("lex,reversed")
4+1+1+1
3+2+1+1
2+2+2+1
o.random()
3+2+1+1
o.dispose()
o = Abacus.Partition(8,{"parts=":4})
o.total()
5
default order is "lex", lexicographic-order
o.rewind()
[ '2+2+2+2', 0, 0, '2+2+2+2' ]
[ '3+2+2+1', 1, 1, '3+2+2+1' ]
[ '3+3+1+1', 2, 2, '3+3+1+1' ]
[ '4+2+1+1', 3, 3, '4+2+1+1' ]
[ '5+1+1+1', 4, 4, '5+1+1+1' ]
o.rewind(-1)
5+1+1+1
4+2+1+1
3+3+1+1
3+2+2+1
2+2+2+2
o.order("lex,reflected")
2+2+2+2
1+2+2+3
1+1+3+3
1+1+2+4
1+1+1+5
o.order("lex,reversed")
5+1+1+1
4+2+1+1
3+3+1+1
3+2+2+1
2+2+2+2
o.random()
2+2+2+2
o.dispose()
o = Abacus.Partition(10,{"parts=":4})
o.total()
9
default order is "lex", lexicographic-order
o.rewind()
[ '3+3+2+2', 0, 0, '3+3+2+2' ]
[ '3+3+3+1', 1, 1, '3+3+3+1' ]
[ '4+2+2+2', 2, 2, '4+2+2+2' ]
[ '4+3+2+1', 3, 3, '4+3+2+1' ]
[ '4+4+1+1', 4, 4, '4+4+1+1' ]
[ '5+2+2+1', 5, 5, '5+2+2+1' ]
[ '5+3+1+1', 6, 6, '5+3+1+1' ]
[ '6+2+1+1', 7, 7, '6+2+1+1' ]
[ '7+1+1+1', 8, 8, '7+1+1+1' ]
o.rewind(-1)
7+1+1+1
6+2+1+1
5+3+1+1
5+2+2+1
4+4+1+1
4+3+2+1
4+2+2+2
3+3+3+1
3+3+2+2
o.order("lex,reflected")
2+2+3+3
1+3+3+3
2+2+2+4
1+2+3+4
1+1+4+4
1+2+2+5
1+1+3+5
1+1+2+6
1+1+1+7
o.order("lex,reversed")
7+1+1+1
6+2+1+1
5+3+1+1
5+2+2+1
4+4+1+1
4+3+2+1
4+2+2+2
3+3+3+1
3+3+2+2
o.random()
4+3+2+1
o.dispose()
o = Abacus.Partition(11,{"parts=":5})
o.total()
10
default order is "lex", lexicographic-order
o.rewind()
[ '3+2+2+2+2', 0, 0, '3+2+2+2+2' ]
[ '3+3+2+2+1', 1, 1, '3+3+2+2+1' ]
[ '3+3+3+1+1', 2, 2, '3+3+3+1+1' ]
[ '4+2+2+2+1', 3, 3, '4+2+2+2+1' ]
[ '4+3+2+1+1', 4, 4, '4+3+2+1+1' ]
[ '4+4+1+1+1', 5, 5, '4+4+1+1+1' ]
[ '5+2+2+1+1', 6, 6, '5+2+2+1+1' ]
[ '5+3+1+1+1', 7, 7, '5+3+1+1+1' ]
[ '6+2+1+1+1', 8, 8, '6+2+1+1+1' ]
[ '7+1+1+1+1', 9, 9, '7+1+1+1+1' ]
backwards
o.rewind(-1)
7+1+1+1+1
6+2+1+1+1
5+3+1+1+1
5+2+2+1+1
4+4+1+1+1
4+3+2+1+1
4+2+2+2+1
3+3+3+1+1
3+3+2+2+1
3+2+2+2+2
o.order("lex,reflected")
2+2+2+2+3
1+2+2+3+3
1+1+3+3+3
1+2+2+2+4
1+1+2+3+4
1+1+1+4+4
1+1+2+2+5
1+1+1+3+5
1+1+1+2+6
1+1+1+1+7
o.order("lex,reversed")
7+1+1+1+1
6+2+1+1+1
5+3+1+1+1
5+2+2+1+1
4+4+1+1+1
4+3+2+1+1
4+2+2+2+1
3+3+3+1+1
3+3+2+2+1
3+2+2+2+2
o.random()
4+2+2+2+1
o.dispose()
o = Abacus.Partition(12,{"parts=":4})
o.total()
15
default order is "lex", lexicographic-order
o.rewind()
[ '3+3+3+3', 0, 0, '3+3+3+3' ]
[ '4+3+3+2', 1, 1, '4+3+3+2' ]
[ '4+4+2+2', 2, 2, '4+4+2+2' ]
[ '4+4+3+1', 3, 3, '4+4+3+1' ]
[ '5+3+2+2', 4, 4, '5+3+2+2' ]
[ '5+3+3+1', 5, 5, '5+3+3+1' ]
[ '5+4+2+1', 6, 6, '5+4+2+1' ]
[ '5+5+1+1', 7, 7, '5+5+1+1' ]
[ '6+2+2+2', 8, 8, '6+2+2+2' ]
[ '6+3+2+1', 9, 9, '6+3+2+1' ]
[ '6+4+1+1', 10, 10, '6+4+1+1' ]
[ '7+2+2+1', 11, 11, '7+2+2+1' ]
[ '7+3+1+1', 12, 12, '7+3+1+1' ]
[ '8+2+1+1', 13, 13, '8+2+1+1' ]
[ '9+1+1+1', 14, 14, '9+1+1+1' ]
o.rewind(-1)
9+1+1+1
8+2+1+1
7+3+1+1
7+2+2+1
6+4+1+1
6+3+2+1
6+2+2+2
5+5+1+1
5+4+2+1
5+3+3+1
5+3+2+2
4+4+3+1
4+4+2+2
4+3+3+2
3+3+3+3
o.order("lex,reflected")
3+3+3+3
2+3+3+4
2+2+4+4
1+3+4+4
2+2+3+5
1+3+3+5
1+2+4+5
1+1+5+5
2+2+2+6
1+2+3+6
1+1+4+6
1+2+2+7
1+1+3+7
1+1+2+8
1+1+1+9
o.order("lex,reversed")
9+1+1+1
8+2+1+1
7+3+1+1
7+2+2+1
6+4+1+1
6+3+2+1
6+2+2+2
5+5+1+1
5+4+2+1
5+3+3+1
5+3+2+2
4+4+3+1
4+4+2+2
4+3+3+2
3+3+3+3
o.random()
6+4+1+1
o.dispose()
o = Abacus.Partition(20,{"parts=":4,"max=":6})
o.total()
4
default order is "lex", lexicographic-order
o.rewind()
[ '6+5+5+4', 0, 0, '6+5+5+4' ]
[ '6+6+4+4', 1, 1, '6+6+4+4' ]
[ '6+6+5+3', 2, 2, '6+6+5+3' ]
[ '6+6+6+2', 3, 3, '6+6+6+2' ]
o.rewind(-1)
6+6+6+2
6+6+5+3
6+6+4+4
6+5+5+4
o.order("lex,reflected")
4+5+5+6
4+4+6+6
3+5+6+6
2+6+6+6
o.order("lex,reversed")
6+6+6+2
6+6+5+3
6+6+4+4
6+5+5+4
o.random()
6+5+5+4
o.dispose()
o = Abacus.Partition(10,{"parts=":4,"max=":3})
o.total()
2
default order is "lex", lexicographic-order
o.rewind()
[ '3+3+2+2', 0, 0, '3+3+2+2' ]
[ '3+3+3+1', 1, 1, '3+3+3+1' ]
o.rewind(-1)
3+3+3+1
3+3+2+2
o.random()
3+3+3+1
o.dispose()
o = Abacus.Partition(12,{"parts=":5,"max=":5})
o.total()
3
default order is "lex", lexicographic-order
o.rewind()
[ '5+2+2+2+1', 0, 0, '5+2+2+2+1' ]
[ '5+3+2+1+1', 1, 1, '5+3+2+1+1' ]
[ '5+4+1+1+1', 2, 2, '5+4+1+1+1' ]
o.rewind(-1)
5+4+1+1+1
5+3+2+1+1
5+2+2+2+1
o.random()
5+3+2+1+1
o.dispose()
o = Abacus.Partition(20,{"parts=":5,"max=":5})
o.total()
5
default order is "lex", lexicographic-order
o.rewind()
[ '5+4+4+4+3', 0, 0, '5+4+4+4+3' ]
[ '5+5+4+3+3', 1, 1, '5+5+4+3+3' ]
[ '5+5+4+4+2', 2, 2, '5+5+4+4+2' ]
[ '5+5+5+3+2', 3, 3, '5+5+5+3+2' ]
[ '5+5+5+4+1', 4, 4, '5+5+5+4+1' ]
o.rewind(-1)
5+5+5+4+1
5+5+5+3+2
5+5+4+4+2
5+5+4+3+3
5+4+4+4+3
o.random()
5+5+5+4+1
o.dispose()
o = Abacus.Partition(51,{"max=":7,"parts=":8})
o.total()
7
default order is "lex", lexicographic-order
o.rewind()
[ '7+7+7+6+6+6+6+6', 0, 0, '7+7+7+6+6+6+6+6' ]
[ '7+7+7+7+6+6+6+5', 1, 1, '7+7+7+7+6+6+6+5' ]
[ '7+7+7+7+7+6+5+5', 2, 2, '7+7+7+7+7+6+5+5' ]
[ '7+7+7+7+7+6+6+4', 3, 3, '7+7+7+7+7+6+6+4' ]
[ '7+7+7+7+7+7+5+4', 4, 4, '7+7+7+7+7+7+5+4' ]
[ '7+7+7+7+7+7+6+3', 5, 5, '7+7+7+7+7+7+6+3' ]
[ '7+7+7+7+7+7+7+2', 6, 6, '7+7+7+7+7+7+7+2' ]
backwards
o.rewind(-1)
7+7+7+7+7+7+7+2
7+7+7+7+7+7+6+3
7+7+7+7+7+7+5+4
7+7+7+7+7+6+6+4
7+7+7+7+7+6+5+5
7+7+7+7+6+6+6+5
7+7+7+6+6+6+6+6
o.random()
7+7+7+6+6+6+6+6
o.dispose()
